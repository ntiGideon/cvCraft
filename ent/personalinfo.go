// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ntiGideon/cvCraft/ent/personalinfo"
	"github.com/ntiGideon/cvCraft/ent/resume"
)

// PersonalInfo is the model entity for the PersonalInfo schema.
type PersonalInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Profession holds the value of the "profession" field.
	Profession string `json:"profession,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Website holds the value of the "website" field.
	Website string `json:"website,omitempty"`
	// Linkedin holds the value of the "linkedin" field.
	Linkedin string `json:"linkedin,omitempty"`
	// Github holds the value of the "github" field.
	Github string `json:"github,omitempty"`
	// Twitter holds the value of the "twitter" field.
	Twitter string `json:"twitter,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio string `json:"bio,omitempty"`
	// PhotoURL holds the value of the "photo_url" field.
	PhotoURL string `json:"photo_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonalInfoQuery when eager-loading is set.
	Edges                PersonalInfoEdges `json:"edges"`
	resume_personal_info *int
	selectValues         sql.SelectValues
}

// PersonalInfoEdges holds the relations/edges for other nodes in the graph.
type PersonalInfoEdges struct {
	// Resume holds the value of the resume edge.
	Resume *Resume `json:"resume,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ResumeOrErr returns the Resume value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PersonalInfoEdges) ResumeOrErr() (*Resume, error) {
	if e.Resume != nil {
		return e.Resume, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: resume.Label}
	}
	return nil, &NotLoadedError{edge: "resume"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PersonalInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case personalinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case personalinfo.FieldFirstName, personalinfo.FieldLastName, personalinfo.FieldProfession, personalinfo.FieldEmail, personalinfo.FieldPhone, personalinfo.FieldAddress, personalinfo.FieldWebsite, personalinfo.FieldLinkedin, personalinfo.FieldGithub, personalinfo.FieldTwitter, personalinfo.FieldBio, personalinfo.FieldPhotoURL:
			values[i] = new(sql.NullString)
		case personalinfo.ForeignKeys[0]: // resume_personal_info
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PersonalInfo fields.
func (pi *PersonalInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case personalinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case personalinfo.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				pi.FirstName = value.String
			}
		case personalinfo.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				pi.LastName = value.String
			}
		case personalinfo.FieldProfession:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profession", values[i])
			} else if value.Valid {
				pi.Profession = value.String
			}
		case personalinfo.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pi.Email = value.String
			}
		case personalinfo.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				pi.Phone = value.String
			}
		case personalinfo.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				pi.Address = value.String
			}
		case personalinfo.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				pi.Website = value.String
			}
		case personalinfo.FieldLinkedin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field linkedin", values[i])
			} else if value.Valid {
				pi.Linkedin = value.String
			}
		case personalinfo.FieldGithub:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field github", values[i])
			} else if value.Valid {
				pi.Github = value.String
			}
		case personalinfo.FieldTwitter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitter", values[i])
			} else if value.Valid {
				pi.Twitter = value.String
			}
		case personalinfo.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				pi.Bio = value.String
			}
		case personalinfo.FieldPhotoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo_url", values[i])
			} else if value.Valid {
				pi.PhotoURL = value.String
			}
		case personalinfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field resume_personal_info", value)
			} else if value.Valid {
				pi.resume_personal_info = new(int)
				*pi.resume_personal_info = int(value.Int64)
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PersonalInfo.
// This includes values selected through modifiers, order, etc.
func (pi *PersonalInfo) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryResume queries the "resume" edge of the PersonalInfo entity.
func (pi *PersonalInfo) QueryResume() *ResumeQuery {
	return NewPersonalInfoClient(pi.config).QueryResume(pi)
}

// Update returns a builder for updating this PersonalInfo.
// Note that you need to call PersonalInfo.Unwrap() before calling this method if this PersonalInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PersonalInfo) Update() *PersonalInfoUpdateOne {
	return NewPersonalInfoClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the PersonalInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PersonalInfo) Unwrap() *PersonalInfo {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PersonalInfo is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PersonalInfo) String() string {
	var builder strings.Builder
	builder.WriteString("PersonalInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("first_name=")
	builder.WriteString(pi.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(pi.LastName)
	builder.WriteString(", ")
	builder.WriteString("profession=")
	builder.WriteString(pi.Profession)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(pi.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(pi.Phone)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(pi.Address)
	builder.WriteString(", ")
	builder.WriteString("website=")
	builder.WriteString(pi.Website)
	builder.WriteString(", ")
	builder.WriteString("linkedin=")
	builder.WriteString(pi.Linkedin)
	builder.WriteString(", ")
	builder.WriteString("github=")
	builder.WriteString(pi.Github)
	builder.WriteString(", ")
	builder.WriteString("twitter=")
	builder.WriteString(pi.Twitter)
	builder.WriteString(", ")
	builder.WriteString("bio=")
	builder.WriteString(pi.Bio)
	builder.WriteString(", ")
	builder.WriteString("photo_url=")
	builder.WriteString(pi.PhotoURL)
	builder.WriteByte(')')
	return builder.String()
}

// PersonalInfos is a parsable slice of PersonalInfo.
type PersonalInfos []*PersonalInfo
