// Code generated by ent, DO NOT EDIT.

package template

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ntiGideon/cvCraft/internal/models"
)

const (
	// Label holds the string label denoting the template type in the database.
	Label = "template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSections holds the string denoting the sections field in the database.
	FieldSections = "sections"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldThumbnailURL holds the string denoting the thumbnail_url field in the database.
	FieldThumbnailURL = "thumbnail_url"
	// FieldPreviewURL holds the string denoting the preview_url field in the database.
	FieldPreviewURL = "preview_url"
	// FieldStyle holds the string denoting the style field in the database.
	FieldStyle = "style"
	// FieldPremium holds the string denoting the premium field in the database.
	FieldPremium = "premium"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeResumes holds the string denoting the resumes edge name in mutations.
	EdgeResumes = "resumes"
	// Table holds the table name of the template in the database.
	Table = "templates"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "templates"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_templates"
	// ResumesTable is the table that holds the resumes relation/edge.
	ResumesTable = "resumes"
	// ResumesInverseTable is the table name for the Resume entity.
	// It exists in this package in order to avoid circular dependency with the "resume" package.
	ResumesInverseTable = "resumes"
	// ResumesColumn is the table column denoting the resumes relation/edge.
	ResumesColumn = "template_resumes"
)

// Columns holds all SQL columns for template fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldSections,
	FieldConfig,
	FieldThumbnailURL,
	FieldPreviewURL,
	FieldStyle,
	FieldPremium,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "templates"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_templates",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultSections holds the default value on creation for the "sections" field.
	DefaultSections []string
	// DefaultConfig holds the default value on creation for the "config" field.
	DefaultConfig *models.TemplateConfig
	// DefaultStyle holds the default value on creation for the "style" field.
	DefaultStyle string
	// DefaultPremium holds the default value on creation for the "premium" field.
	DefaultPremium bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Template queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByThumbnailURL orders the results by the thumbnail_url field.
func ByThumbnailURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThumbnailURL, opts...).ToFunc()
}

// ByPreviewURL orders the results by the preview_url field.
func ByPreviewURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreviewURL, opts...).ToFunc()
}

// ByStyle orders the results by the style field.
func ByStyle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStyle, opts...).ToFunc()
}

// ByPremium orders the results by the premium field.
func ByPremium(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPremium, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByResumesCount orders the results by resumes count.
func ByResumesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newResumesStep(), opts...)
	}
}

// ByResumes orders the results by resumes terms.
func ByResumes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResumesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newResumesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResumesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ResumesTable, ResumesColumn),
	)
}
