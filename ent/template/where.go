// Code generated by ent, DO NOT EDIT.

package template

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ntiGideon/cvCraft/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldDescription, v))
}

// ThumbnailURL applies equality check predicate on the "thumbnail_url" field. It's identical to ThumbnailURLEQ.
func ThumbnailURL(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldThumbnailURL, v))
}

// PreviewURL applies equality check predicate on the "preview_url" field. It's identical to PreviewURLEQ.
func PreviewURL(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldPreviewURL, v))
}

// Style applies equality check predicate on the "style" field. It's identical to StyleEQ.
func Style(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldStyle, v))
}

// Premium applies equality check predicate on the "premium" field. It's identical to PremiumEQ.
func Premium(v bool) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldPremium, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Template {
	return predicate.Template(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Template {
	return predicate.Template(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Template {
	return predicate.Template(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Template {
	return predicate.Template(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Template {
	return predicate.Template(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Template {
	return predicate.Template(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Template {
	return predicate.Template(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Template {
	return predicate.Template(sql.FieldContainsFold(FieldDescription, v))
}

// ThumbnailURLEQ applies the EQ predicate on the "thumbnail_url" field.
func ThumbnailURLEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldThumbnailURL, v))
}

// ThumbnailURLNEQ applies the NEQ predicate on the "thumbnail_url" field.
func ThumbnailURLNEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldThumbnailURL, v))
}

// ThumbnailURLIn applies the In predicate on the "thumbnail_url" field.
func ThumbnailURLIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldThumbnailURL, vs...))
}

// ThumbnailURLNotIn applies the NotIn predicate on the "thumbnail_url" field.
func ThumbnailURLNotIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldThumbnailURL, vs...))
}

// ThumbnailURLGT applies the GT predicate on the "thumbnail_url" field.
func ThumbnailURLGT(v string) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldThumbnailURL, v))
}

// ThumbnailURLGTE applies the GTE predicate on the "thumbnail_url" field.
func ThumbnailURLGTE(v string) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldThumbnailURL, v))
}

// ThumbnailURLLT applies the LT predicate on the "thumbnail_url" field.
func ThumbnailURLLT(v string) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldThumbnailURL, v))
}

// ThumbnailURLLTE applies the LTE predicate on the "thumbnail_url" field.
func ThumbnailURLLTE(v string) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldThumbnailURL, v))
}

// ThumbnailURLContains applies the Contains predicate on the "thumbnail_url" field.
func ThumbnailURLContains(v string) predicate.Template {
	return predicate.Template(sql.FieldContains(FieldThumbnailURL, v))
}

// ThumbnailURLHasPrefix applies the HasPrefix predicate on the "thumbnail_url" field.
func ThumbnailURLHasPrefix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasPrefix(FieldThumbnailURL, v))
}

// ThumbnailURLHasSuffix applies the HasSuffix predicate on the "thumbnail_url" field.
func ThumbnailURLHasSuffix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasSuffix(FieldThumbnailURL, v))
}

// ThumbnailURLIsNil applies the IsNil predicate on the "thumbnail_url" field.
func ThumbnailURLIsNil() predicate.Template {
	return predicate.Template(sql.FieldIsNull(FieldThumbnailURL))
}

// ThumbnailURLNotNil applies the NotNil predicate on the "thumbnail_url" field.
func ThumbnailURLNotNil() predicate.Template {
	return predicate.Template(sql.FieldNotNull(FieldThumbnailURL))
}

// ThumbnailURLEqualFold applies the EqualFold predicate on the "thumbnail_url" field.
func ThumbnailURLEqualFold(v string) predicate.Template {
	return predicate.Template(sql.FieldEqualFold(FieldThumbnailURL, v))
}

// ThumbnailURLContainsFold applies the ContainsFold predicate on the "thumbnail_url" field.
func ThumbnailURLContainsFold(v string) predicate.Template {
	return predicate.Template(sql.FieldContainsFold(FieldThumbnailURL, v))
}

// PreviewURLEQ applies the EQ predicate on the "preview_url" field.
func PreviewURLEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldPreviewURL, v))
}

// PreviewURLNEQ applies the NEQ predicate on the "preview_url" field.
func PreviewURLNEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldPreviewURL, v))
}

// PreviewURLIn applies the In predicate on the "preview_url" field.
func PreviewURLIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldPreviewURL, vs...))
}

// PreviewURLNotIn applies the NotIn predicate on the "preview_url" field.
func PreviewURLNotIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldPreviewURL, vs...))
}

// PreviewURLGT applies the GT predicate on the "preview_url" field.
func PreviewURLGT(v string) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldPreviewURL, v))
}

// PreviewURLGTE applies the GTE predicate on the "preview_url" field.
func PreviewURLGTE(v string) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldPreviewURL, v))
}

// PreviewURLLT applies the LT predicate on the "preview_url" field.
func PreviewURLLT(v string) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldPreviewURL, v))
}

// PreviewURLLTE applies the LTE predicate on the "preview_url" field.
func PreviewURLLTE(v string) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldPreviewURL, v))
}

// PreviewURLContains applies the Contains predicate on the "preview_url" field.
func PreviewURLContains(v string) predicate.Template {
	return predicate.Template(sql.FieldContains(FieldPreviewURL, v))
}

// PreviewURLHasPrefix applies the HasPrefix predicate on the "preview_url" field.
func PreviewURLHasPrefix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasPrefix(FieldPreviewURL, v))
}

// PreviewURLHasSuffix applies the HasSuffix predicate on the "preview_url" field.
func PreviewURLHasSuffix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasSuffix(FieldPreviewURL, v))
}

// PreviewURLIsNil applies the IsNil predicate on the "preview_url" field.
func PreviewURLIsNil() predicate.Template {
	return predicate.Template(sql.FieldIsNull(FieldPreviewURL))
}

// PreviewURLNotNil applies the NotNil predicate on the "preview_url" field.
func PreviewURLNotNil() predicate.Template {
	return predicate.Template(sql.FieldNotNull(FieldPreviewURL))
}

// PreviewURLEqualFold applies the EqualFold predicate on the "preview_url" field.
func PreviewURLEqualFold(v string) predicate.Template {
	return predicate.Template(sql.FieldEqualFold(FieldPreviewURL, v))
}

// PreviewURLContainsFold applies the ContainsFold predicate on the "preview_url" field.
func PreviewURLContainsFold(v string) predicate.Template {
	return predicate.Template(sql.FieldContainsFold(FieldPreviewURL, v))
}

// StyleEQ applies the EQ predicate on the "style" field.
func StyleEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldStyle, v))
}

// StyleNEQ applies the NEQ predicate on the "style" field.
func StyleNEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldStyle, v))
}

// StyleIn applies the In predicate on the "style" field.
func StyleIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldStyle, vs...))
}

// StyleNotIn applies the NotIn predicate on the "style" field.
func StyleNotIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldStyle, vs...))
}

// StyleGT applies the GT predicate on the "style" field.
func StyleGT(v string) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldStyle, v))
}

// StyleGTE applies the GTE predicate on the "style" field.
func StyleGTE(v string) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldStyle, v))
}

// StyleLT applies the LT predicate on the "style" field.
func StyleLT(v string) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldStyle, v))
}

// StyleLTE applies the LTE predicate on the "style" field.
func StyleLTE(v string) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldStyle, v))
}

// StyleContains applies the Contains predicate on the "style" field.
func StyleContains(v string) predicate.Template {
	return predicate.Template(sql.FieldContains(FieldStyle, v))
}

// StyleHasPrefix applies the HasPrefix predicate on the "style" field.
func StyleHasPrefix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasPrefix(FieldStyle, v))
}

// StyleHasSuffix applies the HasSuffix predicate on the "style" field.
func StyleHasSuffix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasSuffix(FieldStyle, v))
}

// StyleEqualFold applies the EqualFold predicate on the "style" field.
func StyleEqualFold(v string) predicate.Template {
	return predicate.Template(sql.FieldEqualFold(FieldStyle, v))
}

// StyleContainsFold applies the ContainsFold predicate on the "style" field.
func StyleContainsFold(v string) predicate.Template {
	return predicate.Template(sql.FieldContainsFold(FieldStyle, v))
}

// PremiumEQ applies the EQ predicate on the "premium" field.
func PremiumEQ(v bool) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldPremium, v))
}

// PremiumNEQ applies the NEQ predicate on the "premium" field.
func PremiumNEQ(v bool) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldPremium, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldCreatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Template {
	return predicate.Template(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Template {
	return predicate.Template(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResumes applies the HasEdge predicate on the "resumes" edge.
func HasResumes() predicate.Template {
	return predicate.Template(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ResumesTable, ResumesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResumesWith applies the HasEdge predicate on the "resumes" edge with a given conditions (other predicates).
func HasResumesWith(preds ...predicate.Resume) predicate.Template {
	return predicate.Template(func(s *sql.Selector) {
		step := newResumesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Template) predicate.Template {
	return predicate.Template(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Template) predicate.Template {
	return predicate.Template(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Template) predicate.Template {
	return predicate.Template(sql.NotPredicates(p))
}
