// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ntiGideon/cvCraft/ent/personalinfo"
	"github.com/ntiGideon/cvCraft/ent/resume"
)

// PersonalInfoCreate is the builder for creating a PersonalInfo entity.
type PersonalInfoCreate struct {
	config
	mutation *PersonalInfoMutation
	hooks    []Hook
}

// SetFirstName sets the "first_name" field.
func (pic *PersonalInfoCreate) SetFirstName(s string) *PersonalInfoCreate {
	pic.mutation.SetFirstName(s)
	return pic
}

// SetLastName sets the "last_name" field.
func (pic *PersonalInfoCreate) SetLastName(s string) *PersonalInfoCreate {
	pic.mutation.SetLastName(s)
	return pic
}

// SetProfession sets the "profession" field.
func (pic *PersonalInfoCreate) SetProfession(s string) *PersonalInfoCreate {
	pic.mutation.SetProfession(s)
	return pic
}

// SetEmail sets the "email" field.
func (pic *PersonalInfoCreate) SetEmail(s string) *PersonalInfoCreate {
	pic.mutation.SetEmail(s)
	return pic
}

// SetPhone sets the "phone" field.
func (pic *PersonalInfoCreate) SetPhone(s string) *PersonalInfoCreate {
	pic.mutation.SetPhone(s)
	return pic
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillablePhone(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetPhone(*s)
	}
	return pic
}

// SetAddress sets the "address" field.
func (pic *PersonalInfoCreate) SetAddress(s string) *PersonalInfoCreate {
	pic.mutation.SetAddress(s)
	return pic
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableAddress(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetAddress(*s)
	}
	return pic
}

// SetWebsite sets the "website" field.
func (pic *PersonalInfoCreate) SetWebsite(s string) *PersonalInfoCreate {
	pic.mutation.SetWebsite(s)
	return pic
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableWebsite(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetWebsite(*s)
	}
	return pic
}

// SetLinkedin sets the "linkedin" field.
func (pic *PersonalInfoCreate) SetLinkedin(s string) *PersonalInfoCreate {
	pic.mutation.SetLinkedin(s)
	return pic
}

// SetNillableLinkedin sets the "linkedin" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableLinkedin(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetLinkedin(*s)
	}
	return pic
}

// SetGithub sets the "github" field.
func (pic *PersonalInfoCreate) SetGithub(s string) *PersonalInfoCreate {
	pic.mutation.SetGithub(s)
	return pic
}

// SetNillableGithub sets the "github" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableGithub(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetGithub(*s)
	}
	return pic
}

// SetTwitter sets the "twitter" field.
func (pic *PersonalInfoCreate) SetTwitter(s string) *PersonalInfoCreate {
	pic.mutation.SetTwitter(s)
	return pic
}

// SetNillableTwitter sets the "twitter" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableTwitter(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetTwitter(*s)
	}
	return pic
}

// SetBio sets the "bio" field.
func (pic *PersonalInfoCreate) SetBio(s string) *PersonalInfoCreate {
	pic.mutation.SetBio(s)
	return pic
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillableBio(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetBio(*s)
	}
	return pic
}

// SetPhotoURL sets the "photo_url" field.
func (pic *PersonalInfoCreate) SetPhotoURL(s string) *PersonalInfoCreate {
	pic.mutation.SetPhotoURL(s)
	return pic
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (pic *PersonalInfoCreate) SetNillablePhotoURL(s *string) *PersonalInfoCreate {
	if s != nil {
		pic.SetPhotoURL(*s)
	}
	return pic
}

// SetResumeID sets the "resume" edge to the Resume entity by ID.
func (pic *PersonalInfoCreate) SetResumeID(id int) *PersonalInfoCreate {
	pic.mutation.SetResumeID(id)
	return pic
}

// SetResume sets the "resume" edge to the Resume entity.
func (pic *PersonalInfoCreate) SetResume(r *Resume) *PersonalInfoCreate {
	return pic.SetResumeID(r.ID)
}

// Mutation returns the PersonalInfoMutation object of the builder.
func (pic *PersonalInfoCreate) Mutation() *PersonalInfoMutation {
	return pic.mutation
}

// Save creates the PersonalInfo in the database.
func (pic *PersonalInfoCreate) Save(ctx context.Context) (*PersonalInfo, error) {
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PersonalInfoCreate) SaveX(ctx context.Context) *PersonalInfo {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *PersonalInfoCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *PersonalInfoCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *PersonalInfoCreate) check() error {
	if _, ok := pic.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "PersonalInfo.first_name"`)}
	}
	if v, ok := pic.mutation.FirstName(); ok {
		if err := personalinfo.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.first_name": %w`, err)}
		}
	}
	if _, ok := pic.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "PersonalInfo.last_name"`)}
	}
	if v, ok := pic.mutation.LastName(); ok {
		if err := personalinfo.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.last_name": %w`, err)}
		}
	}
	if _, ok := pic.mutation.Profession(); !ok {
		return &ValidationError{Name: "profession", err: errors.New(`ent: missing required field "PersonalInfo.profession"`)}
	}
	if v, ok := pic.mutation.Profession(); ok {
		if err := personalinfo.ProfessionValidator(v); err != nil {
			return &ValidationError{Name: "profession", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.profession": %w`, err)}
		}
	}
	if _, ok := pic.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "PersonalInfo.email"`)}
	}
	if v, ok := pic.mutation.Email(); ok {
		if err := personalinfo.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.email": %w`, err)}
		}
	}
	if len(pic.mutation.ResumeIDs()) == 0 {
		return &ValidationError{Name: "resume", err: errors.New(`ent: missing required edge "PersonalInfo.resume"`)}
	}
	return nil
}

func (pic *PersonalInfoCreate) sqlSave(ctx context.Context) (*PersonalInfo, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *PersonalInfoCreate) createSpec() (*PersonalInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &PersonalInfo{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(personalinfo.Table, sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeInt))
	)
	if value, ok := pic.mutation.FirstName(); ok {
		_spec.SetField(personalinfo.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := pic.mutation.LastName(); ok {
		_spec.SetField(personalinfo.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := pic.mutation.Profession(); ok {
		_spec.SetField(personalinfo.FieldProfession, field.TypeString, value)
		_node.Profession = value
	}
	if value, ok := pic.mutation.Email(); ok {
		_spec.SetField(personalinfo.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := pic.mutation.Phone(); ok {
		_spec.SetField(personalinfo.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := pic.mutation.Address(); ok {
		_spec.SetField(personalinfo.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := pic.mutation.Website(); ok {
		_spec.SetField(personalinfo.FieldWebsite, field.TypeString, value)
		_node.Website = value
	}
	if value, ok := pic.mutation.Linkedin(); ok {
		_spec.SetField(personalinfo.FieldLinkedin, field.TypeString, value)
		_node.Linkedin = value
	}
	if value, ok := pic.mutation.Github(); ok {
		_spec.SetField(personalinfo.FieldGithub, field.TypeString, value)
		_node.Github = value
	}
	if value, ok := pic.mutation.Twitter(); ok {
		_spec.SetField(personalinfo.FieldTwitter, field.TypeString, value)
		_node.Twitter = value
	}
	if value, ok := pic.mutation.Bio(); ok {
		_spec.SetField(personalinfo.FieldBio, field.TypeString, value)
		_node.Bio = value
	}
	if value, ok := pic.mutation.PhotoURL(); ok {
		_spec.SetField(personalinfo.FieldPhotoURL, field.TypeString, value)
		_node.PhotoURL = value
	}
	if nodes := pic.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   personalinfo.ResumeTable,
			Columns: []string{personalinfo.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.resume_personal_info = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PersonalInfoCreateBulk is the builder for creating many PersonalInfo entities in bulk.
type PersonalInfoCreateBulk struct {
	config
	err      error
	builders []*PersonalInfoCreate
}

// Save creates the PersonalInfo entities in the database.
func (picb *PersonalInfoCreateBulk) Save(ctx context.Context) ([]*PersonalInfo, error) {
	if picb.err != nil {
		return nil, picb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*PersonalInfo, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonalInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *PersonalInfoCreateBulk) SaveX(ctx context.Context) []*PersonalInfo {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *PersonalInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *PersonalInfoCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
