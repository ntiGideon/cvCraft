// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ntiGideon/cvCraft/ent/personalinfo"
	"github.com/ntiGideon/cvCraft/ent/resume"
	"github.com/ntiGideon/cvCraft/ent/template"
	"github.com/ntiGideon/cvCraft/ent/user"
)

// Resume is the model entity for the Resume schema.
type Resume struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Shared holds the value of the "shared" field.
	Shared bool `json:"shared,omitempty"`
	// ShareCode holds the value of the "share_code" field.
	ShareCode string `json:"share_code,omitempty"`
	// Status holds the value of the "status" field.
	Status resume.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResumeQuery when eager-loading is set.
	Edges            ResumeEdges `json:"edges"`
	template_resumes *int
	user_resumes     *int
	selectValues     sql.SelectValues
}

// ResumeEdges holds the relations/edges for other nodes in the graph.
type ResumeEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Template holds the value of the template edge.
	Template *Template `json:"template,omitempty"`
	// PersonalInfo holds the value of the personal_info edge.
	PersonalInfo *PersonalInfo `json:"personal_info,omitempty"`
	// Experiences holds the value of the experiences edge.
	Experiences []*Experience `json:"experiences,omitempty"`
	// Educations holds the value of the educations edge.
	Educations []*Education `json:"educations,omitempty"`
	// Skills holds the value of the skills edge.
	Skills []*Skill `json:"skills,omitempty"`
	// Projects holds the value of the projects edge.
	Projects []*Project `json:"projects,omitempty"`
	// Certifications holds the value of the certifications edge.
	Certifications []*Certification `json:"certifications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// TemplateOrErr returns the Template value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeEdges) TemplateOrErr() (*Template, error) {
	if e.Template != nil {
		return e.Template, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: template.Label}
	}
	return nil, &NotLoadedError{edge: "template"}
}

// PersonalInfoOrErr returns the PersonalInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResumeEdges) PersonalInfoOrErr() (*PersonalInfo, error) {
	if e.PersonalInfo != nil {
		return e.PersonalInfo, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: personalinfo.Label}
	}
	return nil, &NotLoadedError{edge: "personal_info"}
}

// ExperiencesOrErr returns the Experiences value or an error if the edge
// was not loaded in eager-loading.
func (e ResumeEdges) ExperiencesOrErr() ([]*Experience, error) {
	if e.loadedTypes[3] {
		return e.Experiences, nil
	}
	return nil, &NotLoadedError{edge: "experiences"}
}

// EducationsOrErr returns the Educations value or an error if the edge
// was not loaded in eager-loading.
func (e ResumeEdges) EducationsOrErr() ([]*Education, error) {
	if e.loadedTypes[4] {
		return e.Educations, nil
	}
	return nil, &NotLoadedError{edge: "educations"}
}

// SkillsOrErr returns the Skills value or an error if the edge
// was not loaded in eager-loading.
func (e ResumeEdges) SkillsOrErr() ([]*Skill, error) {
	if e.loadedTypes[5] {
		return e.Skills, nil
	}
	return nil, &NotLoadedError{edge: "skills"}
}

// ProjectsOrErr returns the Projects value or an error if the edge
// was not loaded in eager-loading.
func (e ResumeEdges) ProjectsOrErr() ([]*Project, error) {
	if e.loadedTypes[6] {
		return e.Projects, nil
	}
	return nil, &NotLoadedError{edge: "projects"}
}

// CertificationsOrErr returns the Certifications value or an error if the edge
// was not loaded in eager-loading.
func (e ResumeEdges) CertificationsOrErr() ([]*Certification, error) {
	if e.loadedTypes[7] {
		return e.Certifications, nil
	}
	return nil, &NotLoadedError{edge: "certifications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Resume) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resume.FieldShared:
			values[i] = new(sql.NullBool)
		case resume.FieldID:
			values[i] = new(sql.NullInt64)
		case resume.FieldName, resume.FieldShareCode, resume.FieldStatus:
			values[i] = new(sql.NullString)
		case resume.FieldCreatedAt, resume.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case resume.ForeignKeys[0]: // template_resumes
			values[i] = new(sql.NullInt64)
		case resume.ForeignKeys[1]: // user_resumes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Resume fields.
func (r *Resume) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resume.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case resume.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case resume.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case resume.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case resume.FieldShared:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field shared", values[i])
			} else if value.Valid {
				r.Shared = value.Bool
			}
		case resume.FieldShareCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field share_code", values[i])
			} else if value.Valid {
				r.ShareCode = value.String
			}
		case resume.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = resume.Status(value.String)
			}
		case resume.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field template_resumes", value)
			} else if value.Valid {
				r.template_resumes = new(int)
				*r.template_resumes = int(value.Int64)
			}
		case resume.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_resumes", value)
			} else if value.Valid {
				r.user_resumes = new(int)
				*r.user_resumes = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Resume.
// This includes values selected through modifiers, order, etc.
func (r *Resume) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Resume entity.
func (r *Resume) QueryOwner() *UserQuery {
	return NewResumeClient(r.config).QueryOwner(r)
}

// QueryTemplate queries the "template" edge of the Resume entity.
func (r *Resume) QueryTemplate() *TemplateQuery {
	return NewResumeClient(r.config).QueryTemplate(r)
}

// QueryPersonalInfo queries the "personal_info" edge of the Resume entity.
func (r *Resume) QueryPersonalInfo() *PersonalInfoQuery {
	return NewResumeClient(r.config).QueryPersonalInfo(r)
}

// QueryExperiences queries the "experiences" edge of the Resume entity.
func (r *Resume) QueryExperiences() *ExperienceQuery {
	return NewResumeClient(r.config).QueryExperiences(r)
}

// QueryEducations queries the "educations" edge of the Resume entity.
func (r *Resume) QueryEducations() *EducationQuery {
	return NewResumeClient(r.config).QueryEducations(r)
}

// QuerySkills queries the "skills" edge of the Resume entity.
func (r *Resume) QuerySkills() *SkillQuery {
	return NewResumeClient(r.config).QuerySkills(r)
}

// QueryProjects queries the "projects" edge of the Resume entity.
func (r *Resume) QueryProjects() *ProjectQuery {
	return NewResumeClient(r.config).QueryProjects(r)
}

// QueryCertifications queries the "certifications" edge of the Resume entity.
func (r *Resume) QueryCertifications() *CertificationQuery {
	return NewResumeClient(r.config).QueryCertifications(r)
}

// Update returns a builder for updating this Resume.
// Note that you need to call Resume.Unwrap() before calling this method if this Resume
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Resume) Update() *ResumeUpdateOne {
	return NewResumeClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Resume entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Resume) Unwrap() *Resume {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Resume is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Resume) String() string {
	var builder strings.Builder
	builder.WriteString("Resume(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("shared=")
	builder.WriteString(fmt.Sprintf("%v", r.Shared))
	builder.WriteString(", ")
	builder.WriteString("share_code=")
	builder.WriteString(r.ShareCode)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Resumes is a parsable slice of Resume.
type Resumes []*Resume
