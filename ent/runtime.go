// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/ntiGideon/cvCraft/ent/certification"
	"github.com/ntiGideon/cvCraft/ent/education"
	"github.com/ntiGideon/cvCraft/ent/experience"
	"github.com/ntiGideon/cvCraft/ent/personalinfo"
	"github.com/ntiGideon/cvCraft/ent/project"
	"github.com/ntiGideon/cvCraft/ent/resume"
	"github.com/ntiGideon/cvCraft/ent/schema"
	"github.com/ntiGideon/cvCraft/ent/session"
	"github.com/ntiGideon/cvCraft/ent/skill"
	"github.com/ntiGideon/cvCraft/ent/template"
	"github.com/ntiGideon/cvCraft/ent/user"
	"github.com/ntiGideon/cvCraft/internal/models"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	certificationFields := schema.Certification{}.Fields()
	_ = certificationFields
	// certificationDescName is the schema descriptor for name field.
	certificationDescName := certificationFields[0].Descriptor()
	// certification.NameValidator is a validator for the "name" field. It is called by the builders before save.
	certification.NameValidator = certificationDescName.Validators[0].(func(string) error)
	// certificationDescOrganization is the schema descriptor for organization field.
	certificationDescOrganization := certificationFields[1].Descriptor()
	// certification.OrganizationValidator is a validator for the "organization" field. It is called by the builders before save.
	certification.OrganizationValidator = certificationDescOrganization.Validators[0].(func(string) error)
	educationFields := schema.Education{}.Fields()
	_ = educationFields
	// educationDescInstitution is the schema descriptor for institution field.
	educationDescInstitution := educationFields[0].Descriptor()
	// education.InstitutionValidator is a validator for the "institution" field. It is called by the builders before save.
	education.InstitutionValidator = educationDescInstitution.Validators[0].(func(string) error)
	// educationDescDegree is the schema descriptor for degree field.
	educationDescDegree := educationFields[1].Descriptor()
	// education.DegreeValidator is a validator for the "degree" field. It is called by the builders before save.
	education.DegreeValidator = educationDescDegree.Validators[0].(func(string) error)
	// educationDescField is the schema descriptor for field field.
	educationDescField := educationFields[2].Descriptor()
	// education.FieldValidator is a validator for the "field" field. It is called by the builders before save.
	education.FieldValidator = educationDescField.Validators[0].(func(string) error)
	experienceFields := schema.Experience{}.Fields()
	_ = experienceFields
	// experienceDescTitle is the schema descriptor for title field.
	experienceDescTitle := experienceFields[0].Descriptor()
	// experience.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	experience.TitleValidator = experienceDescTitle.Validators[0].(func(string) error)
	// experienceDescCompany is the schema descriptor for company field.
	experienceDescCompany := experienceFields[1].Descriptor()
	// experience.CompanyValidator is a validator for the "company" field. It is called by the builders before save.
	experience.CompanyValidator = experienceDescCompany.Validators[0].(func(string) error)
	// experienceDescCurrent is the schema descriptor for current field.
	experienceDescCurrent := experienceFields[7].Descriptor()
	// experience.DefaultCurrent holds the default value on creation for the current field.
	experience.DefaultCurrent = experienceDescCurrent.Default.(bool)
	personalinfoFields := schema.PersonalInfo{}.Fields()
	_ = personalinfoFields
	// personalinfoDescFirstName is the schema descriptor for first_name field.
	personalinfoDescFirstName := personalinfoFields[0].Descriptor()
	// personalinfo.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	personalinfo.FirstNameValidator = personalinfoDescFirstName.Validators[0].(func(string) error)
	// personalinfoDescLastName is the schema descriptor for last_name field.
	personalinfoDescLastName := personalinfoFields[1].Descriptor()
	// personalinfo.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	personalinfo.LastNameValidator = personalinfoDescLastName.Validators[0].(func(string) error)
	// personalinfoDescProfession is the schema descriptor for profession field.
	personalinfoDescProfession := personalinfoFields[2].Descriptor()
	// personalinfo.ProfessionValidator is a validator for the "profession" field. It is called by the builders before save.
	personalinfo.ProfessionValidator = personalinfoDescProfession.Validators[0].(func(string) error)
	// personalinfoDescEmail is the schema descriptor for email field.
	personalinfoDescEmail := personalinfoFields[3].Descriptor()
	// personalinfo.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	personalinfo.EmailValidator = personalinfoDescEmail.Validators[0].(func(string) error)
	projectFields := schema.Project{}.Fields()
	_ = projectFields
	// projectDescName is the schema descriptor for name field.
	projectDescName := projectFields[0].Descriptor()
	// project.NameValidator is a validator for the "name" field. It is called by the builders before save.
	project.NameValidator = projectDescName.Validators[0].(func(string) error)
	// projectDescDescription is the schema descriptor for description field.
	projectDescDescription := projectFields[1].Descriptor()
	// project.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	project.DescriptionValidator = projectDescDescription.Validators[0].(func(string) error)
	resumeFields := schema.Resume{}.Fields()
	_ = resumeFields
	// resumeDescName is the schema descriptor for name field.
	resumeDescName := resumeFields[0].Descriptor()
	// resume.NameValidator is a validator for the "name" field. It is called by the builders before save.
	resume.NameValidator = resumeDescName.Validators[0].(func(string) error)
	// resumeDescCreatedAt is the schema descriptor for created_at field.
	resumeDescCreatedAt := resumeFields[1].Descriptor()
	// resume.DefaultCreatedAt holds the default value on creation for the created_at field.
	resume.DefaultCreatedAt = resumeDescCreatedAt.Default.(func() time.Time)
	// resumeDescUpdatedAt is the schema descriptor for updated_at field.
	resumeDescUpdatedAt := resumeFields[2].Descriptor()
	// resume.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	resume.DefaultUpdatedAt = resumeDescUpdatedAt.Default.(func() time.Time)
	// resume.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	resume.UpdateDefaultUpdatedAt = resumeDescUpdatedAt.UpdateDefault.(func() time.Time)
	// resumeDescShared is the schema descriptor for shared field.
	resumeDescShared := resumeFields[3].Descriptor()
	// resume.DefaultShared holds the default value on creation for the shared field.
	resume.DefaultShared = resumeDescShared.Default.(bool)
	sessionFields := schema.Session{}.Fields()
	_ = sessionFields
	// sessionDescToken is the schema descriptor for token field.
	sessionDescToken := sessionFields[0].Descriptor()
	// session.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	session.TokenValidator = func() func(string) error {
		validators := sessionDescToken.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(token string) error {
			for _, fn := range fns {
				if err := fn(token); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// sessionDescData is the schema descriptor for data field.
	sessionDescData := sessionFields[1].Descriptor()
	// session.DataValidator is a validator for the "data" field. It is called by the builders before save.
	session.DataValidator = sessionDescData.Validators[0].(func([]byte) error)
	// sessionDescExpiry is the schema descriptor for expiry field.
	sessionDescExpiry := sessionFields[2].Descriptor()
	// session.DefaultExpiry holds the default value on creation for the expiry field.
	session.DefaultExpiry = sessionDescExpiry.Default.(func() time.Time)
	skillFields := schema.Skill{}.Fields()
	_ = skillFields
	// skillDescName is the schema descriptor for name field.
	skillDescName := skillFields[0].Descriptor()
	// skill.NameValidator is a validator for the "name" field. It is called by the builders before save.
	skill.NameValidator = skillDescName.Validators[0].(func(string) error)
	// skillDescCategory is the schema descriptor for category field.
	skillDescCategory := skillFields[1].Descriptor()
	// skill.CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	skill.CategoryValidator = skillDescCategory.Validators[0].(func(string) error)
	templateFields := schema.Template{}.Fields()
	_ = templateFields
	// templateDescName is the schema descriptor for name field.
	templateDescName := templateFields[0].Descriptor()
	// template.NameValidator is a validator for the "name" field. It is called by the builders before save.
	template.NameValidator = templateDescName.Validators[0].(func(string) error)
	// templateDescSections is the schema descriptor for sections field.
	templateDescSections := templateFields[2].Descriptor()
	// template.DefaultSections holds the default value on creation for the sections field.
	template.DefaultSections = templateDescSections.Default.([]string)
	// templateDescConfig is the schema descriptor for config field.
	templateDescConfig := templateFields[3].Descriptor()
	// template.DefaultConfig holds the default value on creation for the config field.
	template.DefaultConfig = templateDescConfig.Default.(*models.TemplateConfig)
	// templateDescStyle is the schema descriptor for style field.
	templateDescStyle := templateFields[6].Descriptor()
	// template.DefaultStyle holds the default value on creation for the style field.
	template.DefaultStyle = templateDescStyle.Default.(string)
	// templateDescPremium is the schema descriptor for premium field.
	templateDescPremium := templateFields[7].Descriptor()
	// template.DefaultPremium holds the default value on creation for the premium field.
	template.DefaultPremium = templateDescPremium.Default.(bool)
	// templateDescCreatedAt is the schema descriptor for created_at field.
	templateDescCreatedAt := templateFields[8].Descriptor()
	// template.DefaultCreatedAt holds the default value on creation for the created_at field.
	template.DefaultCreatedAt = templateDescCreatedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[3].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[4].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescVerified is the schema descriptor for verified field.
	userDescVerified := userFields[6].Descriptor()
	// user.DefaultVerified holds the default value on creation for the verified field.
	user.DefaultVerified = userDescVerified.Default.(bool)
}
