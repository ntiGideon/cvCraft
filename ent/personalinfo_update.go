// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ntiGideon/cvCraft/ent/personalinfo"
	"github.com/ntiGideon/cvCraft/ent/predicate"
	"github.com/ntiGideon/cvCraft/ent/resume"
)

// PersonalInfoUpdate is the builder for updating PersonalInfo entities.
type PersonalInfoUpdate struct {
	config
	hooks    []Hook
	mutation *PersonalInfoMutation
}

// Where appends a list predicates to the PersonalInfoUpdate builder.
func (piu *PersonalInfoUpdate) Where(ps ...predicate.PersonalInfo) *PersonalInfoUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetFirstName sets the "first_name" field.
func (piu *PersonalInfoUpdate) SetFirstName(s string) *PersonalInfoUpdate {
	piu.mutation.SetFirstName(s)
	return piu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableFirstName(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetFirstName(*s)
	}
	return piu
}

// SetLastName sets the "last_name" field.
func (piu *PersonalInfoUpdate) SetLastName(s string) *PersonalInfoUpdate {
	piu.mutation.SetLastName(s)
	return piu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableLastName(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetLastName(*s)
	}
	return piu
}

// SetProfession sets the "profession" field.
func (piu *PersonalInfoUpdate) SetProfession(s string) *PersonalInfoUpdate {
	piu.mutation.SetProfession(s)
	return piu
}

// SetNillableProfession sets the "profession" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableProfession(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetProfession(*s)
	}
	return piu
}

// SetEmail sets the "email" field.
func (piu *PersonalInfoUpdate) SetEmail(s string) *PersonalInfoUpdate {
	piu.mutation.SetEmail(s)
	return piu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableEmail(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetEmail(*s)
	}
	return piu
}

// SetPhone sets the "phone" field.
func (piu *PersonalInfoUpdate) SetPhone(s string) *PersonalInfoUpdate {
	piu.mutation.SetPhone(s)
	return piu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillablePhone(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetPhone(*s)
	}
	return piu
}

// ClearPhone clears the value of the "phone" field.
func (piu *PersonalInfoUpdate) ClearPhone() *PersonalInfoUpdate {
	piu.mutation.ClearPhone()
	return piu
}

// SetAddress sets the "address" field.
func (piu *PersonalInfoUpdate) SetAddress(s string) *PersonalInfoUpdate {
	piu.mutation.SetAddress(s)
	return piu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableAddress(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetAddress(*s)
	}
	return piu
}

// ClearAddress clears the value of the "address" field.
func (piu *PersonalInfoUpdate) ClearAddress() *PersonalInfoUpdate {
	piu.mutation.ClearAddress()
	return piu
}

// SetWebsite sets the "website" field.
func (piu *PersonalInfoUpdate) SetWebsite(s string) *PersonalInfoUpdate {
	piu.mutation.SetWebsite(s)
	return piu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableWebsite(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetWebsite(*s)
	}
	return piu
}

// ClearWebsite clears the value of the "website" field.
func (piu *PersonalInfoUpdate) ClearWebsite() *PersonalInfoUpdate {
	piu.mutation.ClearWebsite()
	return piu
}

// SetLinkedin sets the "linkedin" field.
func (piu *PersonalInfoUpdate) SetLinkedin(s string) *PersonalInfoUpdate {
	piu.mutation.SetLinkedin(s)
	return piu
}

// SetNillableLinkedin sets the "linkedin" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableLinkedin(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetLinkedin(*s)
	}
	return piu
}

// ClearLinkedin clears the value of the "linkedin" field.
func (piu *PersonalInfoUpdate) ClearLinkedin() *PersonalInfoUpdate {
	piu.mutation.ClearLinkedin()
	return piu
}

// SetGithub sets the "github" field.
func (piu *PersonalInfoUpdate) SetGithub(s string) *PersonalInfoUpdate {
	piu.mutation.SetGithub(s)
	return piu
}

// SetNillableGithub sets the "github" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableGithub(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetGithub(*s)
	}
	return piu
}

// ClearGithub clears the value of the "github" field.
func (piu *PersonalInfoUpdate) ClearGithub() *PersonalInfoUpdate {
	piu.mutation.ClearGithub()
	return piu
}

// SetTwitter sets the "twitter" field.
func (piu *PersonalInfoUpdate) SetTwitter(s string) *PersonalInfoUpdate {
	piu.mutation.SetTwitter(s)
	return piu
}

// SetNillableTwitter sets the "twitter" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableTwitter(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetTwitter(*s)
	}
	return piu
}

// ClearTwitter clears the value of the "twitter" field.
func (piu *PersonalInfoUpdate) ClearTwitter() *PersonalInfoUpdate {
	piu.mutation.ClearTwitter()
	return piu
}

// SetBio sets the "bio" field.
func (piu *PersonalInfoUpdate) SetBio(s string) *PersonalInfoUpdate {
	piu.mutation.SetBio(s)
	return piu
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillableBio(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetBio(*s)
	}
	return piu
}

// ClearBio clears the value of the "bio" field.
func (piu *PersonalInfoUpdate) ClearBio() *PersonalInfoUpdate {
	piu.mutation.ClearBio()
	return piu
}

// SetPhotoURL sets the "photo_url" field.
func (piu *PersonalInfoUpdate) SetPhotoURL(s string) *PersonalInfoUpdate {
	piu.mutation.SetPhotoURL(s)
	return piu
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (piu *PersonalInfoUpdate) SetNillablePhotoURL(s *string) *PersonalInfoUpdate {
	if s != nil {
		piu.SetPhotoURL(*s)
	}
	return piu
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (piu *PersonalInfoUpdate) ClearPhotoURL() *PersonalInfoUpdate {
	piu.mutation.ClearPhotoURL()
	return piu
}

// SetResumeID sets the "resume" edge to the Resume entity by ID.
func (piu *PersonalInfoUpdate) SetResumeID(id int) *PersonalInfoUpdate {
	piu.mutation.SetResumeID(id)
	return piu
}

// SetResume sets the "resume" edge to the Resume entity.
func (piu *PersonalInfoUpdate) SetResume(r *Resume) *PersonalInfoUpdate {
	return piu.SetResumeID(r.ID)
}

// Mutation returns the PersonalInfoMutation object of the builder.
func (piu *PersonalInfoUpdate) Mutation() *PersonalInfoMutation {
	return piu.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (piu *PersonalInfoUpdate) ClearResume() *PersonalInfoUpdate {
	piu.mutation.ClearResume()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PersonalInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PersonalInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PersonalInfoUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PersonalInfoUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *PersonalInfoUpdate) check() error {
	if v, ok := piu.mutation.FirstName(); ok {
		if err := personalinfo.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.first_name": %w`, err)}
		}
	}
	if v, ok := piu.mutation.LastName(); ok {
		if err := personalinfo.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.last_name": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Profession(); ok {
		if err := personalinfo.ProfessionValidator(v); err != nil {
			return &ValidationError{Name: "profession", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.profession": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Email(); ok {
		if err := personalinfo.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.email": %w`, err)}
		}
	}
	if piu.mutation.ResumeCleared() && len(piu.mutation.ResumeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PersonalInfo.resume"`)
	}
	return nil
}

func (piu *PersonalInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(personalinfo.Table, personalinfo.Columns, sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeInt))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.FirstName(); ok {
		_spec.SetField(personalinfo.FieldFirstName, field.TypeString, value)
	}
	if value, ok := piu.mutation.LastName(); ok {
		_spec.SetField(personalinfo.FieldLastName, field.TypeString, value)
	}
	if value, ok := piu.mutation.Profession(); ok {
		_spec.SetField(personalinfo.FieldProfession, field.TypeString, value)
	}
	if value, ok := piu.mutation.Email(); ok {
		_spec.SetField(personalinfo.FieldEmail, field.TypeString, value)
	}
	if value, ok := piu.mutation.Phone(); ok {
		_spec.SetField(personalinfo.FieldPhone, field.TypeString, value)
	}
	if piu.mutation.PhoneCleared() {
		_spec.ClearField(personalinfo.FieldPhone, field.TypeString)
	}
	if value, ok := piu.mutation.Address(); ok {
		_spec.SetField(personalinfo.FieldAddress, field.TypeString, value)
	}
	if piu.mutation.AddressCleared() {
		_spec.ClearField(personalinfo.FieldAddress, field.TypeString)
	}
	if value, ok := piu.mutation.Website(); ok {
		_spec.SetField(personalinfo.FieldWebsite, field.TypeString, value)
	}
	if piu.mutation.WebsiteCleared() {
		_spec.ClearField(personalinfo.FieldWebsite, field.TypeString)
	}
	if value, ok := piu.mutation.Linkedin(); ok {
		_spec.SetField(personalinfo.FieldLinkedin, field.TypeString, value)
	}
	if piu.mutation.LinkedinCleared() {
		_spec.ClearField(personalinfo.FieldLinkedin, field.TypeString)
	}
	if value, ok := piu.mutation.Github(); ok {
		_spec.SetField(personalinfo.FieldGithub, field.TypeString, value)
	}
	if piu.mutation.GithubCleared() {
		_spec.ClearField(personalinfo.FieldGithub, field.TypeString)
	}
	if value, ok := piu.mutation.Twitter(); ok {
		_spec.SetField(personalinfo.FieldTwitter, field.TypeString, value)
	}
	if piu.mutation.TwitterCleared() {
		_spec.ClearField(personalinfo.FieldTwitter, field.TypeString)
	}
	if value, ok := piu.mutation.Bio(); ok {
		_spec.SetField(personalinfo.FieldBio, field.TypeString, value)
	}
	if piu.mutation.BioCleared() {
		_spec.ClearField(personalinfo.FieldBio, field.TypeString)
	}
	if value, ok := piu.mutation.PhotoURL(); ok {
		_spec.SetField(personalinfo.FieldPhotoURL, field.TypeString, value)
	}
	if piu.mutation.PhotoURLCleared() {
		_spec.ClearField(personalinfo.FieldPhotoURL, field.TypeString)
	}
	if piu.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   personalinfo.ResumeTable,
			Columns: []string{personalinfo.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   personalinfo.ResumeTable,
			Columns: []string{personalinfo.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PersonalInfoUpdateOne is the builder for updating a single PersonalInfo entity.
type PersonalInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonalInfoMutation
}

// SetFirstName sets the "first_name" field.
func (piuo *PersonalInfoUpdateOne) SetFirstName(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetFirstName(s)
	return piuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableFirstName(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetFirstName(*s)
	}
	return piuo
}

// SetLastName sets the "last_name" field.
func (piuo *PersonalInfoUpdateOne) SetLastName(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetLastName(s)
	return piuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableLastName(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetLastName(*s)
	}
	return piuo
}

// SetProfession sets the "profession" field.
func (piuo *PersonalInfoUpdateOne) SetProfession(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetProfession(s)
	return piuo
}

// SetNillableProfession sets the "profession" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableProfession(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetProfession(*s)
	}
	return piuo
}

// SetEmail sets the "email" field.
func (piuo *PersonalInfoUpdateOne) SetEmail(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetEmail(s)
	return piuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableEmail(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetEmail(*s)
	}
	return piuo
}

// SetPhone sets the "phone" field.
func (piuo *PersonalInfoUpdateOne) SetPhone(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetPhone(s)
	return piuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillablePhone(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetPhone(*s)
	}
	return piuo
}

// ClearPhone clears the value of the "phone" field.
func (piuo *PersonalInfoUpdateOne) ClearPhone() *PersonalInfoUpdateOne {
	piuo.mutation.ClearPhone()
	return piuo
}

// SetAddress sets the "address" field.
func (piuo *PersonalInfoUpdateOne) SetAddress(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetAddress(s)
	return piuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableAddress(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetAddress(*s)
	}
	return piuo
}

// ClearAddress clears the value of the "address" field.
func (piuo *PersonalInfoUpdateOne) ClearAddress() *PersonalInfoUpdateOne {
	piuo.mutation.ClearAddress()
	return piuo
}

// SetWebsite sets the "website" field.
func (piuo *PersonalInfoUpdateOne) SetWebsite(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetWebsite(s)
	return piuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableWebsite(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetWebsite(*s)
	}
	return piuo
}

// ClearWebsite clears the value of the "website" field.
func (piuo *PersonalInfoUpdateOne) ClearWebsite() *PersonalInfoUpdateOne {
	piuo.mutation.ClearWebsite()
	return piuo
}

// SetLinkedin sets the "linkedin" field.
func (piuo *PersonalInfoUpdateOne) SetLinkedin(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetLinkedin(s)
	return piuo
}

// SetNillableLinkedin sets the "linkedin" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableLinkedin(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetLinkedin(*s)
	}
	return piuo
}

// ClearLinkedin clears the value of the "linkedin" field.
func (piuo *PersonalInfoUpdateOne) ClearLinkedin() *PersonalInfoUpdateOne {
	piuo.mutation.ClearLinkedin()
	return piuo
}

// SetGithub sets the "github" field.
func (piuo *PersonalInfoUpdateOne) SetGithub(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetGithub(s)
	return piuo
}

// SetNillableGithub sets the "github" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableGithub(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetGithub(*s)
	}
	return piuo
}

// ClearGithub clears the value of the "github" field.
func (piuo *PersonalInfoUpdateOne) ClearGithub() *PersonalInfoUpdateOne {
	piuo.mutation.ClearGithub()
	return piuo
}

// SetTwitter sets the "twitter" field.
func (piuo *PersonalInfoUpdateOne) SetTwitter(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetTwitter(s)
	return piuo
}

// SetNillableTwitter sets the "twitter" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableTwitter(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetTwitter(*s)
	}
	return piuo
}

// ClearTwitter clears the value of the "twitter" field.
func (piuo *PersonalInfoUpdateOne) ClearTwitter() *PersonalInfoUpdateOne {
	piuo.mutation.ClearTwitter()
	return piuo
}

// SetBio sets the "bio" field.
func (piuo *PersonalInfoUpdateOne) SetBio(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetBio(s)
	return piuo
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillableBio(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetBio(*s)
	}
	return piuo
}

// ClearBio clears the value of the "bio" field.
func (piuo *PersonalInfoUpdateOne) ClearBio() *PersonalInfoUpdateOne {
	piuo.mutation.ClearBio()
	return piuo
}

// SetPhotoURL sets the "photo_url" field.
func (piuo *PersonalInfoUpdateOne) SetPhotoURL(s string) *PersonalInfoUpdateOne {
	piuo.mutation.SetPhotoURL(s)
	return piuo
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (piuo *PersonalInfoUpdateOne) SetNillablePhotoURL(s *string) *PersonalInfoUpdateOne {
	if s != nil {
		piuo.SetPhotoURL(*s)
	}
	return piuo
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (piuo *PersonalInfoUpdateOne) ClearPhotoURL() *PersonalInfoUpdateOne {
	piuo.mutation.ClearPhotoURL()
	return piuo
}

// SetResumeID sets the "resume" edge to the Resume entity by ID.
func (piuo *PersonalInfoUpdateOne) SetResumeID(id int) *PersonalInfoUpdateOne {
	piuo.mutation.SetResumeID(id)
	return piuo
}

// SetResume sets the "resume" edge to the Resume entity.
func (piuo *PersonalInfoUpdateOne) SetResume(r *Resume) *PersonalInfoUpdateOne {
	return piuo.SetResumeID(r.ID)
}

// Mutation returns the PersonalInfoMutation object of the builder.
func (piuo *PersonalInfoUpdateOne) Mutation() *PersonalInfoMutation {
	return piuo.mutation
}

// ClearResume clears the "resume" edge to the Resume entity.
func (piuo *PersonalInfoUpdateOne) ClearResume() *PersonalInfoUpdateOne {
	piuo.mutation.ClearResume()
	return piuo
}

// Where appends a list predicates to the PersonalInfoUpdate builder.
func (piuo *PersonalInfoUpdateOne) Where(ps ...predicate.PersonalInfo) *PersonalInfoUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PersonalInfoUpdateOne) Select(field string, fields ...string) *PersonalInfoUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PersonalInfo entity.
func (piuo *PersonalInfoUpdateOne) Save(ctx context.Context) (*PersonalInfo, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PersonalInfoUpdateOne) SaveX(ctx context.Context) *PersonalInfo {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PersonalInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PersonalInfoUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *PersonalInfoUpdateOne) check() error {
	if v, ok := piuo.mutation.FirstName(); ok {
		if err := personalinfo.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.first_name": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.LastName(); ok {
		if err := personalinfo.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.last_name": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Profession(); ok {
		if err := personalinfo.ProfessionValidator(v); err != nil {
			return &ValidationError{Name: "profession", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.profession": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Email(); ok {
		if err := personalinfo.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "PersonalInfo.email": %w`, err)}
		}
	}
	if piuo.mutation.ResumeCleared() && len(piuo.mutation.ResumeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PersonalInfo.resume"`)
	}
	return nil
}

func (piuo *PersonalInfoUpdateOne) sqlSave(ctx context.Context) (_node *PersonalInfo, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(personalinfo.Table, personalinfo.Columns, sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeInt))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PersonalInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personalinfo.FieldID)
		for _, f := range fields {
			if !personalinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personalinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.FirstName(); ok {
		_spec.SetField(personalinfo.FieldFirstName, field.TypeString, value)
	}
	if value, ok := piuo.mutation.LastName(); ok {
		_spec.SetField(personalinfo.FieldLastName, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Profession(); ok {
		_spec.SetField(personalinfo.FieldProfession, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Email(); ok {
		_spec.SetField(personalinfo.FieldEmail, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Phone(); ok {
		_spec.SetField(personalinfo.FieldPhone, field.TypeString, value)
	}
	if piuo.mutation.PhoneCleared() {
		_spec.ClearField(personalinfo.FieldPhone, field.TypeString)
	}
	if value, ok := piuo.mutation.Address(); ok {
		_spec.SetField(personalinfo.FieldAddress, field.TypeString, value)
	}
	if piuo.mutation.AddressCleared() {
		_spec.ClearField(personalinfo.FieldAddress, field.TypeString)
	}
	if value, ok := piuo.mutation.Website(); ok {
		_spec.SetField(personalinfo.FieldWebsite, field.TypeString, value)
	}
	if piuo.mutation.WebsiteCleared() {
		_spec.ClearField(personalinfo.FieldWebsite, field.TypeString)
	}
	if value, ok := piuo.mutation.Linkedin(); ok {
		_spec.SetField(personalinfo.FieldLinkedin, field.TypeString, value)
	}
	if piuo.mutation.LinkedinCleared() {
		_spec.ClearField(personalinfo.FieldLinkedin, field.TypeString)
	}
	if value, ok := piuo.mutation.Github(); ok {
		_spec.SetField(personalinfo.FieldGithub, field.TypeString, value)
	}
	if piuo.mutation.GithubCleared() {
		_spec.ClearField(personalinfo.FieldGithub, field.TypeString)
	}
	if value, ok := piuo.mutation.Twitter(); ok {
		_spec.SetField(personalinfo.FieldTwitter, field.TypeString, value)
	}
	if piuo.mutation.TwitterCleared() {
		_spec.ClearField(personalinfo.FieldTwitter, field.TypeString)
	}
	if value, ok := piuo.mutation.Bio(); ok {
		_spec.SetField(personalinfo.FieldBio, field.TypeString, value)
	}
	if piuo.mutation.BioCleared() {
		_spec.ClearField(personalinfo.FieldBio, field.TypeString)
	}
	if value, ok := piuo.mutation.PhotoURL(); ok {
		_spec.SetField(personalinfo.FieldPhotoURL, field.TypeString, value)
	}
	if piuo.mutation.PhotoURLCleared() {
		_spec.ClearField(personalinfo.FieldPhotoURL, field.TypeString)
	}
	if piuo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   personalinfo.ResumeTable,
			Columns: []string{personalinfo.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   personalinfo.ResumeTable,
			Columns: []string{personalinfo.ResumeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PersonalInfo{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
