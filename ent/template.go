// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ntiGideon/cvCraft/ent/template"
	"github.com/ntiGideon/cvCraft/ent/user"
	"github.com/ntiGideon/cvCraft/internal/models"
)

// Template is the model entity for the Template schema.
type Template struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Sections holds the value of the "sections" field.
	Sections []string `json:"sections,omitempty"`
	// Config holds the value of the "config" field.
	Config *models.TemplateConfig `json:"config,omitempty"`
	// ThumbnailURL holds the value of the "thumbnail_url" field.
	ThumbnailURL string `json:"thumbnail_url,omitempty"`
	// PreviewURL holds the value of the "preview_url" field.
	PreviewURL string `json:"preview_url,omitempty"`
	// Style holds the value of the "style" field.
	Style string `json:"style,omitempty"`
	// Premium holds the value of the "premium" field.
	Premium bool `json:"premium,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TemplateQuery when eager-loading is set.
	Edges          TemplateEdges `json:"edges"`
	user_templates *int
	selectValues   sql.SelectValues
}

// TemplateEdges holds the relations/edges for other nodes in the graph.
type TemplateEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Resumes holds the value of the resumes edge.
	Resumes []*Resume `json:"resumes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TemplateEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ResumesOrErr returns the Resumes value or an error if the edge
// was not loaded in eager-loading.
func (e TemplateEdges) ResumesOrErr() ([]*Resume, error) {
	if e.loadedTypes[1] {
		return e.Resumes, nil
	}
	return nil, &NotLoadedError{edge: "resumes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Template) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case template.FieldSections, template.FieldConfig:
			values[i] = new([]byte)
		case template.FieldPremium:
			values[i] = new(sql.NullBool)
		case template.FieldID:
			values[i] = new(sql.NullInt64)
		case template.FieldName, template.FieldDescription, template.FieldThumbnailURL, template.FieldPreviewURL, template.FieldStyle:
			values[i] = new(sql.NullString)
		case template.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case template.ForeignKeys[0]: // user_templates
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Template fields.
func (t *Template) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case template.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case template.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case template.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case template.FieldSections:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sections", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Sections); err != nil {
					return fmt.Errorf("unmarshal field sections: %w", err)
				}
			}
		case template.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case template.FieldThumbnailURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_url", values[i])
			} else if value.Valid {
				t.ThumbnailURL = value.String
			}
		case template.FieldPreviewURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field preview_url", values[i])
			} else if value.Valid {
				t.PreviewURL = value.String
			}
		case template.FieldStyle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field style", values[i])
			} else if value.Valid {
				t.Style = value.String
			}
		case template.FieldPremium:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field premium", values[i])
			} else if value.Valid {
				t.Premium = value.Bool
			}
		case template.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case template.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_templates", value)
			} else if value.Valid {
				t.user_templates = new(int)
				*t.user_templates = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Template.
// This includes values selected through modifiers, order, etc.
func (t *Template) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Template entity.
func (t *Template) QueryOwner() *UserQuery {
	return NewTemplateClient(t.config).QueryOwner(t)
}

// QueryResumes queries the "resumes" edge of the Template entity.
func (t *Template) QueryResumes() *ResumeQuery {
	return NewTemplateClient(t.config).QueryResumes(t)
}

// Update returns a builder for updating this Template.
// Note that you need to call Template.Unwrap() before calling this method if this Template
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Template) Update() *TemplateUpdateOne {
	return NewTemplateClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Template entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Template) Unwrap() *Template {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Template is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Template) String() string {
	var builder strings.Builder
	builder.WriteString("Template(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("sections=")
	builder.WriteString(fmt.Sprintf("%v", t.Sections))
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", t.Config))
	builder.WriteString(", ")
	builder.WriteString("thumbnail_url=")
	builder.WriteString(t.ThumbnailURL)
	builder.WriteString(", ")
	builder.WriteString("preview_url=")
	builder.WriteString(t.PreviewURL)
	builder.WriteString(", ")
	builder.WriteString("style=")
	builder.WriteString(t.Style)
	builder.WriteString(", ")
	builder.WriteString("premium=")
	builder.WriteString(fmt.Sprintf("%v", t.Premium))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Templates is a parsable slice of Template.
type Templates []*Template
