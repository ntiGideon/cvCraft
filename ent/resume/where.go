// Code generated by ent, DO NOT EDIT.

package resume

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ntiGideon/cvCraft/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldUpdatedAt, v))
}

// Shared applies equality check predicate on the "shared" field. It's identical to SharedEQ.
func Shared(v bool) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldShared, v))
}

// ShareCode applies equality check predicate on the "share_code" field. It's identical to ShareCodeEQ.
func ShareCode(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldShareCode, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldUpdatedAt, v))
}

// SharedEQ applies the EQ predicate on the "shared" field.
func SharedEQ(v bool) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldShared, v))
}

// SharedNEQ applies the NEQ predicate on the "shared" field.
func SharedNEQ(v bool) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldShared, v))
}

// ShareCodeEQ applies the EQ predicate on the "share_code" field.
func ShareCodeEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldShareCode, v))
}

// ShareCodeNEQ applies the NEQ predicate on the "share_code" field.
func ShareCodeNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldShareCode, v))
}

// ShareCodeIn applies the In predicate on the "share_code" field.
func ShareCodeIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldShareCode, vs...))
}

// ShareCodeNotIn applies the NotIn predicate on the "share_code" field.
func ShareCodeNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldShareCode, vs...))
}

// ShareCodeGT applies the GT predicate on the "share_code" field.
func ShareCodeGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldShareCode, v))
}

// ShareCodeGTE applies the GTE predicate on the "share_code" field.
func ShareCodeGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldShareCode, v))
}

// ShareCodeLT applies the LT predicate on the "share_code" field.
func ShareCodeLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldShareCode, v))
}

// ShareCodeLTE applies the LTE predicate on the "share_code" field.
func ShareCodeLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldShareCode, v))
}

// ShareCodeContains applies the Contains predicate on the "share_code" field.
func ShareCodeContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldShareCode, v))
}

// ShareCodeHasPrefix applies the HasPrefix predicate on the "share_code" field.
func ShareCodeHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldShareCode, v))
}

// ShareCodeHasSuffix applies the HasSuffix predicate on the "share_code" field.
func ShareCodeHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldShareCode, v))
}

// ShareCodeIsNil applies the IsNil predicate on the "share_code" field.
func ShareCodeIsNil() predicate.Resume {
	return predicate.Resume(sql.FieldIsNull(FieldShareCode))
}

// ShareCodeNotNil applies the NotNil predicate on the "share_code" field.
func ShareCodeNotNil() predicate.Resume {
	return predicate.Resume(sql.FieldNotNull(FieldShareCode))
}

// ShareCodeEqualFold applies the EqualFold predicate on the "share_code" field.
func ShareCodeEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldShareCode, v))
}

// ShareCodeContainsFold applies the ContainsFold predicate on the "share_code" field.
func ShareCodeContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldShareCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldStatus, vs...))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTemplate applies the HasEdge predicate on the "template" edge.
func HasTemplate() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TemplateTable, TemplateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemplateWith applies the HasEdge predicate on the "template" edge with a given conditions (other predicates).
func HasTemplateWith(preds ...predicate.Template) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newTemplateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPersonalInfo applies the HasEdge predicate on the "personal_info" edge.
func HasPersonalInfo() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PersonalInfoTable, PersonalInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonalInfoWith applies the HasEdge predicate on the "personal_info" edge with a given conditions (other predicates).
func HasPersonalInfoWith(preds ...predicate.PersonalInfo) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newPersonalInfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExperiences applies the HasEdge predicate on the "experiences" edge.
func HasExperiences() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ExperiencesTable, ExperiencesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExperiencesWith applies the HasEdge predicate on the "experiences" edge with a given conditions (other predicates).
func HasExperiencesWith(preds ...predicate.Experience) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newExperiencesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEducations applies the HasEdge predicate on the "educations" edge.
func HasEducations() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EducationsTable, EducationsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEducationsWith applies the HasEdge predicate on the "educations" edge with a given conditions (other predicates).
func HasEducationsWith(preds ...predicate.Education) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newEducationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSkills applies the HasEdge predicate on the "skills" edge.
func HasSkills() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SkillsTable, SkillsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSkillsWith applies the HasEdge predicate on the "skills" edge with a given conditions (other predicates).
func HasSkillsWith(preds ...predicate.Skill) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newSkillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjects applies the HasEdge predicate on the "projects" edge.
func HasProjects() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ProjectsTable, ProjectsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectsWith applies the HasEdge predicate on the "projects" edge with a given conditions (other predicates).
func HasProjectsWith(preds ...predicate.Project) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newProjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCertifications applies the HasEdge predicate on the "certifications" edge.
func HasCertifications() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CertificationsTable, CertificationsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCertificationsWith applies the HasEdge predicate on the "certifications" edge with a given conditions (other predicates).
func HasCertificationsWith(preds ...predicate.Certification) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newCertificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Resume) predicate.Resume {
	return predicate.Resume(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Resume) predicate.Resume {
	return predicate.Resume(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Resume) predicate.Resume {
	return predicate.Resume(sql.NotPredicates(p))
}
