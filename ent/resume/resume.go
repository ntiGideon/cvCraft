// Code generated by ent, DO NOT EDIT.

package resume

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the resume type in the database.
	Label = "resume"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldShared holds the string denoting the shared field in the database.
	FieldShared = "shared"
	// FieldShareCode holds the string denoting the share_code field in the database.
	FieldShareCode = "share_code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeTemplate holds the string denoting the template edge name in mutations.
	EdgeTemplate = "template"
	// EdgePersonalInfo holds the string denoting the personal_info edge name in mutations.
	EdgePersonalInfo = "personal_info"
	// EdgeExperiences holds the string denoting the experiences edge name in mutations.
	EdgeExperiences = "experiences"
	// EdgeEducations holds the string denoting the educations edge name in mutations.
	EdgeEducations = "educations"
	// EdgeSkills holds the string denoting the skills edge name in mutations.
	EdgeSkills = "skills"
	// EdgeProjects holds the string denoting the projects edge name in mutations.
	EdgeProjects = "projects"
	// EdgeCertifications holds the string denoting the certifications edge name in mutations.
	EdgeCertifications = "certifications"
	// Table holds the table name of the resume in the database.
	Table = "resumes"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "resumes"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_resumes"
	// TemplateTable is the table that holds the template relation/edge.
	TemplateTable = "resumes"
	// TemplateInverseTable is the table name for the Template entity.
	// It exists in this package in order to avoid circular dependency with the "template" package.
	TemplateInverseTable = "templates"
	// TemplateColumn is the table column denoting the template relation/edge.
	TemplateColumn = "template_resumes"
	// PersonalInfoTable is the table that holds the personal_info relation/edge.
	PersonalInfoTable = "personal_infos"
	// PersonalInfoInverseTable is the table name for the PersonalInfo entity.
	// It exists in this package in order to avoid circular dependency with the "personalinfo" package.
	PersonalInfoInverseTable = "personal_infos"
	// PersonalInfoColumn is the table column denoting the personal_info relation/edge.
	PersonalInfoColumn = "resume_personal_info"
	// ExperiencesTable is the table that holds the experiences relation/edge. The primary key declared below.
	ExperiencesTable = "resume_experiences"
	// ExperiencesInverseTable is the table name for the Experience entity.
	// It exists in this package in order to avoid circular dependency with the "experience" package.
	ExperiencesInverseTable = "experiences"
	// EducationsTable is the table that holds the educations relation/edge. The primary key declared below.
	EducationsTable = "resume_educations"
	// EducationsInverseTable is the table name for the Education entity.
	// It exists in this package in order to avoid circular dependency with the "education" package.
	EducationsInverseTable = "educations"
	// SkillsTable is the table that holds the skills relation/edge. The primary key declared below.
	SkillsTable = "resume_skills"
	// SkillsInverseTable is the table name for the Skill entity.
	// It exists in this package in order to avoid circular dependency with the "skill" package.
	SkillsInverseTable = "skills"
	// ProjectsTable is the table that holds the projects relation/edge. The primary key declared below.
	ProjectsTable = "resume_projects"
	// ProjectsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectsInverseTable = "projects"
	// CertificationsTable is the table that holds the certifications relation/edge. The primary key declared below.
	CertificationsTable = "resume_certifications"
	// CertificationsInverseTable is the table name for the Certification entity.
	// It exists in this package in order to avoid circular dependency with the "certification" package.
	CertificationsInverseTable = "certifications"
)

// Columns holds all SQL columns for resume fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldShared,
	FieldShareCode,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "resumes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"template_resumes",
	"user_resumes",
}

var (
	// ExperiencesPrimaryKey and ExperiencesColumn2 are the table columns denoting the
	// primary key for the experiences relation (M2M).
	ExperiencesPrimaryKey = []string{"resume_id", "experience_id"}
	// EducationsPrimaryKey and EducationsColumn2 are the table columns denoting the
	// primary key for the educations relation (M2M).
	EducationsPrimaryKey = []string{"resume_id", "education_id"}
	// SkillsPrimaryKey and SkillsColumn2 are the table columns denoting the
	// primary key for the skills relation (M2M).
	SkillsPrimaryKey = []string{"resume_id", "skill_id"}
	// ProjectsPrimaryKey and ProjectsColumn2 are the table columns denoting the
	// primary key for the projects relation (M2M).
	ProjectsPrimaryKey = []string{"resume_id", "project_id"}
	// CertificationsPrimaryKey and CertificationsColumn2 are the table columns denoting the
	// primary key for the certifications relation (M2M).
	CertificationsPrimaryKey = []string{"resume_id", "certification_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultShared holds the default value on creation for the "shared" field.
	DefaultShared bool
)

// Status defines the type for the "status" enum field.
type Status string

// StatusDraft is the default value of the Status enum.
const DefaultStatus = StatusDraft

// Status values.
const (
	StatusDraft     Status = "draft"
	StatusPublished Status = "published"
	StatusArchived  Status = "archived"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDraft, StatusPublished, StatusArchived:
		return nil
	default:
		return fmt.Errorf("resume: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Resume queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByShared orders the results by the shared field.
func ByShared(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShared, opts...).ToFunc()
}

// ByShareCode orders the results by the share_code field.
func ByShareCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShareCode, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByTemplateField orders the results by template field.
func ByTemplateField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTemplateStep(), sql.OrderByField(field, opts...))
	}
}

// ByPersonalInfoField orders the results by personal_info field.
func ByPersonalInfoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonalInfoStep(), sql.OrderByField(field, opts...))
	}
}

// ByExperiencesCount orders the results by experiences count.
func ByExperiencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExperiencesStep(), opts...)
	}
}

// ByExperiences orders the results by experiences terms.
func ByExperiences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExperiencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEducationsCount orders the results by educations count.
func ByEducationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEducationsStep(), opts...)
	}
}

// ByEducations orders the results by educations terms.
func ByEducations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEducationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySkillsCount orders the results by skills count.
func BySkillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSkillsStep(), opts...)
	}
}

// BySkills orders the results by skills terms.
func BySkills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProjectsCount orders the results by projects count.
func ByProjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProjectsStep(), opts...)
	}
}

// ByProjects orders the results by projects terms.
func ByProjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCertificationsCount orders the results by certifications count.
func ByCertificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCertificationsStep(), opts...)
	}
}

// ByCertifications orders the results by certifications terms.
func ByCertifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCertificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newTemplateStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TemplateInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TemplateTable, TemplateColumn),
	)
}
func newPersonalInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonalInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PersonalInfoTable, PersonalInfoColumn),
	)
}
func newExperiencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExperiencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ExperiencesTable, ExperiencesPrimaryKey...),
	)
}
func newEducationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EducationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EducationsTable, EducationsPrimaryKey...),
	)
}
func newSkillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SkillsTable, SkillsPrimaryKey...),
	)
}
func newProjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ProjectsTable, ProjectsPrimaryKey...),
	)
}
func newCertificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CertificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CertificationsTable, CertificationsPrimaryKey...),
	)
}
