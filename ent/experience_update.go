// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ntiGideon/cvCraft/ent/experience"
	"github.com/ntiGideon/cvCraft/ent/predicate"
	"github.com/ntiGideon/cvCraft/ent/resume"
)

// ExperienceUpdate is the builder for updating Experience entities.
type ExperienceUpdate struct {
	config
	hooks    []Hook
	mutation *ExperienceMutation
}

// Where appends a list predicates to the ExperienceUpdate builder.
func (eu *ExperienceUpdate) Where(ps ...predicate.Experience) *ExperienceUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetTitle sets the "title" field.
func (eu *ExperienceUpdate) SetTitle(s string) *ExperienceUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableTitle(s *string) *ExperienceUpdate {
	if s != nil {
		eu.SetTitle(*s)
	}
	return eu
}

// SetCompany sets the "company" field.
func (eu *ExperienceUpdate) SetCompany(s string) *ExperienceUpdate {
	eu.mutation.SetCompany(s)
	return eu
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableCompany(s *string) *ExperienceUpdate {
	if s != nil {
		eu.SetCompany(*s)
	}
	return eu
}

// SetLocation sets the "location" field.
func (eu *ExperienceUpdate) SetLocation(s string) *ExperienceUpdate {
	eu.mutation.SetLocation(s)
	return eu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableLocation(s *string) *ExperienceUpdate {
	if s != nil {
		eu.SetLocation(*s)
	}
	return eu
}

// ClearLocation clears the value of the "location" field.
func (eu *ExperienceUpdate) ClearLocation() *ExperienceUpdate {
	eu.mutation.ClearLocation()
	return eu
}

// SetStartDate sets the "start_date" field.
func (eu *ExperienceUpdate) SetStartDate(t time.Time) *ExperienceUpdate {
	eu.mutation.SetStartDate(t)
	return eu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableStartDate(t *time.Time) *ExperienceUpdate {
	if t != nil {
		eu.SetStartDate(*t)
	}
	return eu
}

// SetEndDate sets the "end_date" field.
func (eu *ExperienceUpdate) SetEndDate(t time.Time) *ExperienceUpdate {
	eu.mutation.SetEndDate(t)
	return eu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableEndDate(t *time.Time) *ExperienceUpdate {
	if t != nil {
		eu.SetEndDate(*t)
	}
	return eu
}

// ClearEndDate clears the value of the "end_date" field.
func (eu *ExperienceUpdate) ClearEndDate() *ExperienceUpdate {
	eu.mutation.ClearEndDate()
	return eu
}

// SetDescription sets the "description" field.
func (eu *ExperienceUpdate) SetDescription(s string) *ExperienceUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableDescription(s *string) *ExperienceUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *ExperienceUpdate) ClearDescription() *ExperienceUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetSkills sets the "skills" field.
func (eu *ExperienceUpdate) SetSkills(s string) *ExperienceUpdate {
	eu.mutation.SetSkills(s)
	return eu
}

// SetNillableSkills sets the "skills" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableSkills(s *string) *ExperienceUpdate {
	if s != nil {
		eu.SetSkills(*s)
	}
	return eu
}

// ClearSkills clears the value of the "skills" field.
func (eu *ExperienceUpdate) ClearSkills() *ExperienceUpdate {
	eu.mutation.ClearSkills()
	return eu
}

// SetCurrent sets the "current" field.
func (eu *ExperienceUpdate) SetCurrent(b bool) *ExperienceUpdate {
	eu.mutation.SetCurrent(b)
	return eu
}

// SetNillableCurrent sets the "current" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableCurrent(b *bool) *ExperienceUpdate {
	if b != nil {
		eu.SetCurrent(*b)
	}
	return eu
}

// AddResumeIDs adds the "resume" edge to the Resume entity by IDs.
func (eu *ExperienceUpdate) AddResumeIDs(ids ...int) *ExperienceUpdate {
	eu.mutation.AddResumeIDs(ids...)
	return eu
}

// AddResume adds the "resume" edges to the Resume entity.
func (eu *ExperienceUpdate) AddResume(r ...*Resume) *ExperienceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddResumeIDs(ids...)
}

// Mutation returns the ExperienceMutation object of the builder.
func (eu *ExperienceUpdate) Mutation() *ExperienceMutation {
	return eu.mutation
}

// ClearResume clears all "resume" edges to the Resume entity.
func (eu *ExperienceUpdate) ClearResume() *ExperienceUpdate {
	eu.mutation.ClearResume()
	return eu
}

// RemoveResumeIDs removes the "resume" edge to Resume entities by IDs.
func (eu *ExperienceUpdate) RemoveResumeIDs(ids ...int) *ExperienceUpdate {
	eu.mutation.RemoveResumeIDs(ids...)
	return eu
}

// RemoveResume removes "resume" edges to Resume entities.
func (eu *ExperienceUpdate) RemoveResume(r ...*Resume) *ExperienceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveResumeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExperienceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExperienceUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExperienceUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExperienceUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExperienceUpdate) check() error {
	if v, ok := eu.mutation.Title(); ok {
		if err := experience.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Experience.title": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Company(); ok {
		if err := experience.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf(`ent: validator failed for field "Experience.company": %w`, err)}
		}
	}
	return nil
}

func (eu *ExperienceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(experience.Table, experience.Columns, sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.SetField(experience.FieldTitle, field.TypeString, value)
	}
	if value, ok := eu.mutation.Company(); ok {
		_spec.SetField(experience.FieldCompany, field.TypeString, value)
	}
	if value, ok := eu.mutation.Location(); ok {
		_spec.SetField(experience.FieldLocation, field.TypeString, value)
	}
	if eu.mutation.LocationCleared() {
		_spec.ClearField(experience.FieldLocation, field.TypeString)
	}
	if value, ok := eu.mutation.StartDate(); ok {
		_spec.SetField(experience.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := eu.mutation.EndDate(); ok {
		_spec.SetField(experience.FieldEndDate, field.TypeTime, value)
	}
	if eu.mutation.EndDateCleared() {
		_spec.ClearField(experience.FieldEndDate, field.TypeTime)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(experience.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(experience.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.Skills(); ok {
		_spec.SetField(experience.FieldSkills, field.TypeString, value)
	}
	if eu.mutation.SkillsCleared() {
		_spec.ClearField(experience.FieldSkills, field.TypeString)
	}
	if value, ok := eu.mutation.Current(); ok {
		_spec.SetField(experience.FieldCurrent, field.TypeBool, value)
	}
	if eu.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   experience.ResumeTable,
			Columns: experience.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedResumeIDs(); len(nodes) > 0 && !eu.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   experience.ResumeTable,
			Columns: experience.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   experience.ResumeTable,
			Columns: experience.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{experience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExperienceUpdateOne is the builder for updating a single Experience entity.
type ExperienceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExperienceMutation
}

// SetTitle sets the "title" field.
func (euo *ExperienceUpdateOne) SetTitle(s string) *ExperienceUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableTitle(s *string) *ExperienceUpdateOne {
	if s != nil {
		euo.SetTitle(*s)
	}
	return euo
}

// SetCompany sets the "company" field.
func (euo *ExperienceUpdateOne) SetCompany(s string) *ExperienceUpdateOne {
	euo.mutation.SetCompany(s)
	return euo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableCompany(s *string) *ExperienceUpdateOne {
	if s != nil {
		euo.SetCompany(*s)
	}
	return euo
}

// SetLocation sets the "location" field.
func (euo *ExperienceUpdateOne) SetLocation(s string) *ExperienceUpdateOne {
	euo.mutation.SetLocation(s)
	return euo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableLocation(s *string) *ExperienceUpdateOne {
	if s != nil {
		euo.SetLocation(*s)
	}
	return euo
}

// ClearLocation clears the value of the "location" field.
func (euo *ExperienceUpdateOne) ClearLocation() *ExperienceUpdateOne {
	euo.mutation.ClearLocation()
	return euo
}

// SetStartDate sets the "start_date" field.
func (euo *ExperienceUpdateOne) SetStartDate(t time.Time) *ExperienceUpdateOne {
	euo.mutation.SetStartDate(t)
	return euo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableStartDate(t *time.Time) *ExperienceUpdateOne {
	if t != nil {
		euo.SetStartDate(*t)
	}
	return euo
}

// SetEndDate sets the "end_date" field.
func (euo *ExperienceUpdateOne) SetEndDate(t time.Time) *ExperienceUpdateOne {
	euo.mutation.SetEndDate(t)
	return euo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableEndDate(t *time.Time) *ExperienceUpdateOne {
	if t != nil {
		euo.SetEndDate(*t)
	}
	return euo
}

// ClearEndDate clears the value of the "end_date" field.
func (euo *ExperienceUpdateOne) ClearEndDate() *ExperienceUpdateOne {
	euo.mutation.ClearEndDate()
	return euo
}

// SetDescription sets the "description" field.
func (euo *ExperienceUpdateOne) SetDescription(s string) *ExperienceUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableDescription(s *string) *ExperienceUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *ExperienceUpdateOne) ClearDescription() *ExperienceUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetSkills sets the "skills" field.
func (euo *ExperienceUpdateOne) SetSkills(s string) *ExperienceUpdateOne {
	euo.mutation.SetSkills(s)
	return euo
}

// SetNillableSkills sets the "skills" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableSkills(s *string) *ExperienceUpdateOne {
	if s != nil {
		euo.SetSkills(*s)
	}
	return euo
}

// ClearSkills clears the value of the "skills" field.
func (euo *ExperienceUpdateOne) ClearSkills() *ExperienceUpdateOne {
	euo.mutation.ClearSkills()
	return euo
}

// SetCurrent sets the "current" field.
func (euo *ExperienceUpdateOne) SetCurrent(b bool) *ExperienceUpdateOne {
	euo.mutation.SetCurrent(b)
	return euo
}

// SetNillableCurrent sets the "current" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableCurrent(b *bool) *ExperienceUpdateOne {
	if b != nil {
		euo.SetCurrent(*b)
	}
	return euo
}

// AddResumeIDs adds the "resume" edge to the Resume entity by IDs.
func (euo *ExperienceUpdateOne) AddResumeIDs(ids ...int) *ExperienceUpdateOne {
	euo.mutation.AddResumeIDs(ids...)
	return euo
}

// AddResume adds the "resume" edges to the Resume entity.
func (euo *ExperienceUpdateOne) AddResume(r ...*Resume) *ExperienceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddResumeIDs(ids...)
}

// Mutation returns the ExperienceMutation object of the builder.
func (euo *ExperienceUpdateOne) Mutation() *ExperienceMutation {
	return euo.mutation
}

// ClearResume clears all "resume" edges to the Resume entity.
func (euo *ExperienceUpdateOne) ClearResume() *ExperienceUpdateOne {
	euo.mutation.ClearResume()
	return euo
}

// RemoveResumeIDs removes the "resume" edge to Resume entities by IDs.
func (euo *ExperienceUpdateOne) RemoveResumeIDs(ids ...int) *ExperienceUpdateOne {
	euo.mutation.RemoveResumeIDs(ids...)
	return euo
}

// RemoveResume removes "resume" edges to Resume entities.
func (euo *ExperienceUpdateOne) RemoveResume(r ...*Resume) *ExperienceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveResumeIDs(ids...)
}

// Where appends a list predicates to the ExperienceUpdate builder.
func (euo *ExperienceUpdateOne) Where(ps ...predicate.Experience) *ExperienceUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExperienceUpdateOne) Select(field string, fields ...string) *ExperienceUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Experience entity.
func (euo *ExperienceUpdateOne) Save(ctx context.Context) (*Experience, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExperienceUpdateOne) SaveX(ctx context.Context) *Experience {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExperienceUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExperienceUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExperienceUpdateOne) check() error {
	if v, ok := euo.mutation.Title(); ok {
		if err := experience.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Experience.title": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Company(); ok {
		if err := experience.CompanyValidator(v); err != nil {
			return &ValidationError{Name: "company", err: fmt.Errorf(`ent: validator failed for field "Experience.company": %w`, err)}
		}
	}
	return nil
}

func (euo *ExperienceUpdateOne) sqlSave(ctx context.Context) (_node *Experience, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(experience.Table, experience.Columns, sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Experience.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, experience.FieldID)
		for _, f := range fields {
			if !experience.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != experience.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.SetField(experience.FieldTitle, field.TypeString, value)
	}
	if value, ok := euo.mutation.Company(); ok {
		_spec.SetField(experience.FieldCompany, field.TypeString, value)
	}
	if value, ok := euo.mutation.Location(); ok {
		_spec.SetField(experience.FieldLocation, field.TypeString, value)
	}
	if euo.mutation.LocationCleared() {
		_spec.ClearField(experience.FieldLocation, field.TypeString)
	}
	if value, ok := euo.mutation.StartDate(); ok {
		_spec.SetField(experience.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := euo.mutation.EndDate(); ok {
		_spec.SetField(experience.FieldEndDate, field.TypeTime, value)
	}
	if euo.mutation.EndDateCleared() {
		_spec.ClearField(experience.FieldEndDate, field.TypeTime)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(experience.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(experience.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.Skills(); ok {
		_spec.SetField(experience.FieldSkills, field.TypeString, value)
	}
	if euo.mutation.SkillsCleared() {
		_spec.ClearField(experience.FieldSkills, field.TypeString)
	}
	if value, ok := euo.mutation.Current(); ok {
		_spec.SetField(experience.FieldCurrent, field.TypeBool, value)
	}
	if euo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   experience.ResumeTable,
			Columns: experience.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedResumeIDs(); len(nodes) > 0 && !euo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   experience.ResumeTable,
			Columns: experience.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   experience.ResumeTable,
			Columns: experience.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Experience{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{experience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
