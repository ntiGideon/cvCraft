// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ntiGideon/cvCraft/ent/certification"
	"github.com/ntiGideon/cvCraft/ent/education"
	"github.com/ntiGideon/cvCraft/ent/experience"
	"github.com/ntiGideon/cvCraft/ent/personalinfo"
	"github.com/ntiGideon/cvCraft/ent/predicate"
	"github.com/ntiGideon/cvCraft/ent/project"
	"github.com/ntiGideon/cvCraft/ent/resume"
	"github.com/ntiGideon/cvCraft/ent/skill"
	"github.com/ntiGideon/cvCraft/ent/template"
	"github.com/ntiGideon/cvCraft/ent/user"
)

// ResumeUpdate is the builder for updating Resume entities.
type ResumeUpdate struct {
	config
	hooks    []Hook
	mutation *ResumeMutation
}

// Where appends a list predicates to the ResumeUpdate builder.
func (ru *ResumeUpdate) Where(ps ...predicate.Resume) *ResumeUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *ResumeUpdate) SetName(s string) *ResumeUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableName(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *ResumeUpdate) SetCreatedAt(t time.Time) *ResumeUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableCreatedAt(t *time.Time) *ResumeUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ResumeUpdate) SetUpdatedAt(t time.Time) *ResumeUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetShared sets the "shared" field.
func (ru *ResumeUpdate) SetShared(b bool) *ResumeUpdate {
	ru.mutation.SetShared(b)
	return ru
}

// SetNillableShared sets the "shared" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableShared(b *bool) *ResumeUpdate {
	if b != nil {
		ru.SetShared(*b)
	}
	return ru
}

// SetShareCode sets the "share_code" field.
func (ru *ResumeUpdate) SetShareCode(s string) *ResumeUpdate {
	ru.mutation.SetShareCode(s)
	return ru
}

// SetNillableShareCode sets the "share_code" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableShareCode(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetShareCode(*s)
	}
	return ru
}

// ClearShareCode clears the value of the "share_code" field.
func (ru *ResumeUpdate) ClearShareCode() *ResumeUpdate {
	ru.mutation.ClearShareCode()
	return ru
}

// SetStatus sets the "status" field.
func (ru *ResumeUpdate) SetStatus(r resume.Status) *ResumeUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableStatus(r *resume.Status) *ResumeUpdate {
	if r != nil {
		ru.SetStatus(*r)
	}
	return ru
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ru *ResumeUpdate) SetOwnerID(id int) *ResumeUpdate {
	ru.mutation.SetOwnerID(id)
	return ru
}

// SetOwner sets the "owner" edge to the User entity.
func (ru *ResumeUpdate) SetOwner(u *User) *ResumeUpdate {
	return ru.SetOwnerID(u.ID)
}

// SetTemplateID sets the "template" edge to the Template entity by ID.
func (ru *ResumeUpdate) SetTemplateID(id int) *ResumeUpdate {
	ru.mutation.SetTemplateID(id)
	return ru
}

// SetNillableTemplateID sets the "template" edge to the Template entity by ID if the given value is not nil.
func (ru *ResumeUpdate) SetNillableTemplateID(id *int) *ResumeUpdate {
	if id != nil {
		ru = ru.SetTemplateID(*id)
	}
	return ru
}

// SetTemplate sets the "template" edge to the Template entity.
func (ru *ResumeUpdate) SetTemplate(t *Template) *ResumeUpdate {
	return ru.SetTemplateID(t.ID)
}

// SetPersonalInfoID sets the "personal_info" edge to the PersonalInfo entity by ID.
func (ru *ResumeUpdate) SetPersonalInfoID(id int) *ResumeUpdate {
	ru.mutation.SetPersonalInfoID(id)
	return ru
}

// SetNillablePersonalInfoID sets the "personal_info" edge to the PersonalInfo entity by ID if the given value is not nil.
func (ru *ResumeUpdate) SetNillablePersonalInfoID(id *int) *ResumeUpdate {
	if id != nil {
		ru = ru.SetPersonalInfoID(*id)
	}
	return ru
}

// SetPersonalInfo sets the "personal_info" edge to the PersonalInfo entity.
func (ru *ResumeUpdate) SetPersonalInfo(p *PersonalInfo) *ResumeUpdate {
	return ru.SetPersonalInfoID(p.ID)
}

// AddExperienceIDs adds the "experiences" edge to the Experience entity by IDs.
func (ru *ResumeUpdate) AddExperienceIDs(ids ...int) *ResumeUpdate {
	ru.mutation.AddExperienceIDs(ids...)
	return ru
}

// AddExperiences adds the "experiences" edges to the Experience entity.
func (ru *ResumeUpdate) AddExperiences(e ...*Experience) *ResumeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.AddExperienceIDs(ids...)
}

// AddEducationIDs adds the "educations" edge to the Education entity by IDs.
func (ru *ResumeUpdate) AddEducationIDs(ids ...int) *ResumeUpdate {
	ru.mutation.AddEducationIDs(ids...)
	return ru
}

// AddEducations adds the "educations" edges to the Education entity.
func (ru *ResumeUpdate) AddEducations(e ...*Education) *ResumeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.AddEducationIDs(ids...)
}

// AddSkillIDs adds the "skills" edge to the Skill entity by IDs.
func (ru *ResumeUpdate) AddSkillIDs(ids ...int) *ResumeUpdate {
	ru.mutation.AddSkillIDs(ids...)
	return ru
}

// AddSkills adds the "skills" edges to the Skill entity.
func (ru *ResumeUpdate) AddSkills(s ...*Skill) *ResumeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddSkillIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (ru *ResumeUpdate) AddProjectIDs(ids ...int) *ResumeUpdate {
	ru.mutation.AddProjectIDs(ids...)
	return ru
}

// AddProjects adds the "projects" edges to the Project entity.
func (ru *ResumeUpdate) AddProjects(p ...*Project) *ResumeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddProjectIDs(ids...)
}

// AddCertificationIDs adds the "certifications" edge to the Certification entity by IDs.
func (ru *ResumeUpdate) AddCertificationIDs(ids ...int) *ResumeUpdate {
	ru.mutation.AddCertificationIDs(ids...)
	return ru
}

// AddCertifications adds the "certifications" edges to the Certification entity.
func (ru *ResumeUpdate) AddCertifications(c ...*Certification) *ResumeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddCertificationIDs(ids...)
}

// Mutation returns the ResumeMutation object of the builder.
func (ru *ResumeUpdate) Mutation() *ResumeMutation {
	return ru.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ru *ResumeUpdate) ClearOwner() *ResumeUpdate {
	ru.mutation.ClearOwner()
	return ru
}

// ClearTemplate clears the "template" edge to the Template entity.
func (ru *ResumeUpdate) ClearTemplate() *ResumeUpdate {
	ru.mutation.ClearTemplate()
	return ru
}

// ClearPersonalInfo clears the "personal_info" edge to the PersonalInfo entity.
func (ru *ResumeUpdate) ClearPersonalInfo() *ResumeUpdate {
	ru.mutation.ClearPersonalInfo()
	return ru
}

// ClearExperiences clears all "experiences" edges to the Experience entity.
func (ru *ResumeUpdate) ClearExperiences() *ResumeUpdate {
	ru.mutation.ClearExperiences()
	return ru
}

// RemoveExperienceIDs removes the "experiences" edge to Experience entities by IDs.
func (ru *ResumeUpdate) RemoveExperienceIDs(ids ...int) *ResumeUpdate {
	ru.mutation.RemoveExperienceIDs(ids...)
	return ru
}

// RemoveExperiences removes "experiences" edges to Experience entities.
func (ru *ResumeUpdate) RemoveExperiences(e ...*Experience) *ResumeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.RemoveExperienceIDs(ids...)
}

// ClearEducations clears all "educations" edges to the Education entity.
func (ru *ResumeUpdate) ClearEducations() *ResumeUpdate {
	ru.mutation.ClearEducations()
	return ru
}

// RemoveEducationIDs removes the "educations" edge to Education entities by IDs.
func (ru *ResumeUpdate) RemoveEducationIDs(ids ...int) *ResumeUpdate {
	ru.mutation.RemoveEducationIDs(ids...)
	return ru
}

// RemoveEducations removes "educations" edges to Education entities.
func (ru *ResumeUpdate) RemoveEducations(e ...*Education) *ResumeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.RemoveEducationIDs(ids...)
}

// ClearSkills clears all "skills" edges to the Skill entity.
func (ru *ResumeUpdate) ClearSkills() *ResumeUpdate {
	ru.mutation.ClearSkills()
	return ru
}

// RemoveSkillIDs removes the "skills" edge to Skill entities by IDs.
func (ru *ResumeUpdate) RemoveSkillIDs(ids ...int) *ResumeUpdate {
	ru.mutation.RemoveSkillIDs(ids...)
	return ru
}

// RemoveSkills removes "skills" edges to Skill entities.
func (ru *ResumeUpdate) RemoveSkills(s ...*Skill) *ResumeUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveSkillIDs(ids...)
}

// ClearProjects clears all "projects" edges to the Project entity.
func (ru *ResumeUpdate) ClearProjects() *ResumeUpdate {
	ru.mutation.ClearProjects()
	return ru
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (ru *ResumeUpdate) RemoveProjectIDs(ids ...int) *ResumeUpdate {
	ru.mutation.RemoveProjectIDs(ids...)
	return ru
}

// RemoveProjects removes "projects" edges to Project entities.
func (ru *ResumeUpdate) RemoveProjects(p ...*Project) *ResumeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemoveProjectIDs(ids...)
}

// ClearCertifications clears all "certifications" edges to the Certification entity.
func (ru *ResumeUpdate) ClearCertifications() *ResumeUpdate {
	ru.mutation.ClearCertifications()
	return ru
}

// RemoveCertificationIDs removes the "certifications" edge to Certification entities by IDs.
func (ru *ResumeUpdate) RemoveCertificationIDs(ids ...int) *ResumeUpdate {
	ru.mutation.RemoveCertificationIDs(ids...)
	return ru
}

// RemoveCertifications removes "certifications" edges to Certification entities.
func (ru *ResumeUpdate) RemoveCertifications(c ...*Certification) *ResumeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveCertificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResumeUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResumeUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResumeUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResumeUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ResumeUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := resume.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ResumeUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := resume.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Resume.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Status(); ok {
		if err := resume.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Resume.status": %w`, err)}
		}
	}
	if ru.mutation.OwnerCleared() && len(ru.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Resume.owner"`)
	}
	return nil
}

func (ru *ResumeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resume.Table, resume.Columns, sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(resume.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(resume.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(resume.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Shared(); ok {
		_spec.SetField(resume.FieldShared, field.TypeBool, value)
	}
	if value, ok := ru.mutation.ShareCode(); ok {
		_spec.SetField(resume.FieldShareCode, field.TypeString, value)
	}
	if ru.mutation.ShareCodeCleared() {
		_spec.ClearField(resume.FieldShareCode, field.TypeString)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(resume.FieldStatus, field.TypeEnum, value)
	}
	if ru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.OwnerTable,
			Columns: []string{resume.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.OwnerTable,
			Columns: []string{resume.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.TemplateTable,
			Columns: []string{resume.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.TemplateTable,
			Columns: []string{resume.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.PersonalInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   resume.PersonalInfoTable,
			Columns: []string{resume.PersonalInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PersonalInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   resume.PersonalInfoTable,
			Columns: []string{resume.PersonalInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.ExperiencesTable,
			Columns: resume.ExperiencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedExperiencesIDs(); len(nodes) > 0 && !ru.mutation.ExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.ExperiencesTable,
			Columns: resume.ExperiencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.ExperiencesTable,
			Columns: resume.ExperiencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.EducationsTable,
			Columns: resume.EducationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedEducationsIDs(); len(nodes) > 0 && !ru.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.EducationsTable,
			Columns: resume.EducationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EducationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.EducationsTable,
			Columns: resume.EducationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.SkillsTable,
			Columns: resume.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !ru.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.SkillsTable,
			Columns: resume.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.SkillsTable,
			Columns: resume.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.ProjectsTable,
			Columns: resume.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !ru.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.ProjectsTable,
			Columns: resume.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.ProjectsTable,
			Columns: resume.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CertificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.CertificationsTable,
			Columns: resume.CertificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedCertificationsIDs(); len(nodes) > 0 && !ru.mutation.CertificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.CertificationsTable,
			Columns: resume.CertificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CertificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.CertificationsTable,
			Columns: resume.CertificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resume.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ResumeUpdateOne is the builder for updating a single Resume entity.
type ResumeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResumeMutation
}

// SetName sets the "name" field.
func (ruo *ResumeUpdateOne) SetName(s string) *ResumeUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableName(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *ResumeUpdateOne) SetCreatedAt(t time.Time) *ResumeUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableCreatedAt(t *time.Time) *ResumeUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ResumeUpdateOne) SetUpdatedAt(t time.Time) *ResumeUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetShared sets the "shared" field.
func (ruo *ResumeUpdateOne) SetShared(b bool) *ResumeUpdateOne {
	ruo.mutation.SetShared(b)
	return ruo
}

// SetNillableShared sets the "shared" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableShared(b *bool) *ResumeUpdateOne {
	if b != nil {
		ruo.SetShared(*b)
	}
	return ruo
}

// SetShareCode sets the "share_code" field.
func (ruo *ResumeUpdateOne) SetShareCode(s string) *ResumeUpdateOne {
	ruo.mutation.SetShareCode(s)
	return ruo
}

// SetNillableShareCode sets the "share_code" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableShareCode(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetShareCode(*s)
	}
	return ruo
}

// ClearShareCode clears the value of the "share_code" field.
func (ruo *ResumeUpdateOne) ClearShareCode() *ResumeUpdateOne {
	ruo.mutation.ClearShareCode()
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *ResumeUpdateOne) SetStatus(r resume.Status) *ResumeUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableStatus(r *resume.Status) *ResumeUpdateOne {
	if r != nil {
		ruo.SetStatus(*r)
	}
	return ruo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ruo *ResumeUpdateOne) SetOwnerID(id int) *ResumeUpdateOne {
	ruo.mutation.SetOwnerID(id)
	return ruo
}

// SetOwner sets the "owner" edge to the User entity.
func (ruo *ResumeUpdateOne) SetOwner(u *User) *ResumeUpdateOne {
	return ruo.SetOwnerID(u.ID)
}

// SetTemplateID sets the "template" edge to the Template entity by ID.
func (ruo *ResumeUpdateOne) SetTemplateID(id int) *ResumeUpdateOne {
	ruo.mutation.SetTemplateID(id)
	return ruo
}

// SetNillableTemplateID sets the "template" edge to the Template entity by ID if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableTemplateID(id *int) *ResumeUpdateOne {
	if id != nil {
		ruo = ruo.SetTemplateID(*id)
	}
	return ruo
}

// SetTemplate sets the "template" edge to the Template entity.
func (ruo *ResumeUpdateOne) SetTemplate(t *Template) *ResumeUpdateOne {
	return ruo.SetTemplateID(t.ID)
}

// SetPersonalInfoID sets the "personal_info" edge to the PersonalInfo entity by ID.
func (ruo *ResumeUpdateOne) SetPersonalInfoID(id int) *ResumeUpdateOne {
	ruo.mutation.SetPersonalInfoID(id)
	return ruo
}

// SetNillablePersonalInfoID sets the "personal_info" edge to the PersonalInfo entity by ID if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillablePersonalInfoID(id *int) *ResumeUpdateOne {
	if id != nil {
		ruo = ruo.SetPersonalInfoID(*id)
	}
	return ruo
}

// SetPersonalInfo sets the "personal_info" edge to the PersonalInfo entity.
func (ruo *ResumeUpdateOne) SetPersonalInfo(p *PersonalInfo) *ResumeUpdateOne {
	return ruo.SetPersonalInfoID(p.ID)
}

// AddExperienceIDs adds the "experiences" edge to the Experience entity by IDs.
func (ruo *ResumeUpdateOne) AddExperienceIDs(ids ...int) *ResumeUpdateOne {
	ruo.mutation.AddExperienceIDs(ids...)
	return ruo
}

// AddExperiences adds the "experiences" edges to the Experience entity.
func (ruo *ResumeUpdateOne) AddExperiences(e ...*Experience) *ResumeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.AddExperienceIDs(ids...)
}

// AddEducationIDs adds the "educations" edge to the Education entity by IDs.
func (ruo *ResumeUpdateOne) AddEducationIDs(ids ...int) *ResumeUpdateOne {
	ruo.mutation.AddEducationIDs(ids...)
	return ruo
}

// AddEducations adds the "educations" edges to the Education entity.
func (ruo *ResumeUpdateOne) AddEducations(e ...*Education) *ResumeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.AddEducationIDs(ids...)
}

// AddSkillIDs adds the "skills" edge to the Skill entity by IDs.
func (ruo *ResumeUpdateOne) AddSkillIDs(ids ...int) *ResumeUpdateOne {
	ruo.mutation.AddSkillIDs(ids...)
	return ruo
}

// AddSkills adds the "skills" edges to the Skill entity.
func (ruo *ResumeUpdateOne) AddSkills(s ...*Skill) *ResumeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddSkillIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (ruo *ResumeUpdateOne) AddProjectIDs(ids ...int) *ResumeUpdateOne {
	ruo.mutation.AddProjectIDs(ids...)
	return ruo
}

// AddProjects adds the "projects" edges to the Project entity.
func (ruo *ResumeUpdateOne) AddProjects(p ...*Project) *ResumeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddProjectIDs(ids...)
}

// AddCertificationIDs adds the "certifications" edge to the Certification entity by IDs.
func (ruo *ResumeUpdateOne) AddCertificationIDs(ids ...int) *ResumeUpdateOne {
	ruo.mutation.AddCertificationIDs(ids...)
	return ruo
}

// AddCertifications adds the "certifications" edges to the Certification entity.
func (ruo *ResumeUpdateOne) AddCertifications(c ...*Certification) *ResumeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddCertificationIDs(ids...)
}

// Mutation returns the ResumeMutation object of the builder.
func (ruo *ResumeUpdateOne) Mutation() *ResumeMutation {
	return ruo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ruo *ResumeUpdateOne) ClearOwner() *ResumeUpdateOne {
	ruo.mutation.ClearOwner()
	return ruo
}

// ClearTemplate clears the "template" edge to the Template entity.
func (ruo *ResumeUpdateOne) ClearTemplate() *ResumeUpdateOne {
	ruo.mutation.ClearTemplate()
	return ruo
}

// ClearPersonalInfo clears the "personal_info" edge to the PersonalInfo entity.
func (ruo *ResumeUpdateOne) ClearPersonalInfo() *ResumeUpdateOne {
	ruo.mutation.ClearPersonalInfo()
	return ruo
}

// ClearExperiences clears all "experiences" edges to the Experience entity.
func (ruo *ResumeUpdateOne) ClearExperiences() *ResumeUpdateOne {
	ruo.mutation.ClearExperiences()
	return ruo
}

// RemoveExperienceIDs removes the "experiences" edge to Experience entities by IDs.
func (ruo *ResumeUpdateOne) RemoveExperienceIDs(ids ...int) *ResumeUpdateOne {
	ruo.mutation.RemoveExperienceIDs(ids...)
	return ruo
}

// RemoveExperiences removes "experiences" edges to Experience entities.
func (ruo *ResumeUpdateOne) RemoveExperiences(e ...*Experience) *ResumeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.RemoveExperienceIDs(ids...)
}

// ClearEducations clears all "educations" edges to the Education entity.
func (ruo *ResumeUpdateOne) ClearEducations() *ResumeUpdateOne {
	ruo.mutation.ClearEducations()
	return ruo
}

// RemoveEducationIDs removes the "educations" edge to Education entities by IDs.
func (ruo *ResumeUpdateOne) RemoveEducationIDs(ids ...int) *ResumeUpdateOne {
	ruo.mutation.RemoveEducationIDs(ids...)
	return ruo
}

// RemoveEducations removes "educations" edges to Education entities.
func (ruo *ResumeUpdateOne) RemoveEducations(e ...*Education) *ResumeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.RemoveEducationIDs(ids...)
}

// ClearSkills clears all "skills" edges to the Skill entity.
func (ruo *ResumeUpdateOne) ClearSkills() *ResumeUpdateOne {
	ruo.mutation.ClearSkills()
	return ruo
}

// RemoveSkillIDs removes the "skills" edge to Skill entities by IDs.
func (ruo *ResumeUpdateOne) RemoveSkillIDs(ids ...int) *ResumeUpdateOne {
	ruo.mutation.RemoveSkillIDs(ids...)
	return ruo
}

// RemoveSkills removes "skills" edges to Skill entities.
func (ruo *ResumeUpdateOne) RemoveSkills(s ...*Skill) *ResumeUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveSkillIDs(ids...)
}

// ClearProjects clears all "projects" edges to the Project entity.
func (ruo *ResumeUpdateOne) ClearProjects() *ResumeUpdateOne {
	ruo.mutation.ClearProjects()
	return ruo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (ruo *ResumeUpdateOne) RemoveProjectIDs(ids ...int) *ResumeUpdateOne {
	ruo.mutation.RemoveProjectIDs(ids...)
	return ruo
}

// RemoveProjects removes "projects" edges to Project entities.
func (ruo *ResumeUpdateOne) RemoveProjects(p ...*Project) *ResumeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemoveProjectIDs(ids...)
}

// ClearCertifications clears all "certifications" edges to the Certification entity.
func (ruo *ResumeUpdateOne) ClearCertifications() *ResumeUpdateOne {
	ruo.mutation.ClearCertifications()
	return ruo
}

// RemoveCertificationIDs removes the "certifications" edge to Certification entities by IDs.
func (ruo *ResumeUpdateOne) RemoveCertificationIDs(ids ...int) *ResumeUpdateOne {
	ruo.mutation.RemoveCertificationIDs(ids...)
	return ruo
}

// RemoveCertifications removes "certifications" edges to Certification entities.
func (ruo *ResumeUpdateOne) RemoveCertifications(c ...*Certification) *ResumeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveCertificationIDs(ids...)
}

// Where appends a list predicates to the ResumeUpdate builder.
func (ruo *ResumeUpdateOne) Where(ps ...predicate.Resume) *ResumeUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResumeUpdateOne) Select(field string, fields ...string) *ResumeUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Resume entity.
func (ruo *ResumeUpdateOne) Save(ctx context.Context) (*Resume, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResumeUpdateOne) SaveX(ctx context.Context) *Resume {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResumeUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResumeUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ResumeUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := resume.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ResumeUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := resume.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Resume.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Status(); ok {
		if err := resume.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Resume.status": %w`, err)}
		}
	}
	if ruo.mutation.OwnerCleared() && len(ruo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Resume.owner"`)
	}
	return nil
}

func (ruo *ResumeUpdateOne) sqlSave(ctx context.Context) (_node *Resume, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resume.Table, resume.Columns, sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Resume.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resume.FieldID)
		for _, f := range fields {
			if !resume.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resume.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(resume.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(resume.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(resume.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Shared(); ok {
		_spec.SetField(resume.FieldShared, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.ShareCode(); ok {
		_spec.SetField(resume.FieldShareCode, field.TypeString, value)
	}
	if ruo.mutation.ShareCodeCleared() {
		_spec.ClearField(resume.FieldShareCode, field.TypeString)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(resume.FieldStatus, field.TypeEnum, value)
	}
	if ruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.OwnerTable,
			Columns: []string{resume.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.OwnerTable,
			Columns: []string{resume.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.TemplateTable,
			Columns: []string{resume.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.TemplateTable,
			Columns: []string{resume.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.PersonalInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   resume.PersonalInfoTable,
			Columns: []string{resume.PersonalInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PersonalInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   resume.PersonalInfoTable,
			Columns: []string{resume.PersonalInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.ExperiencesTable,
			Columns: resume.ExperiencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedExperiencesIDs(); len(nodes) > 0 && !ruo.mutation.ExperiencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.ExperiencesTable,
			Columns: resume.ExperiencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ExperiencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.ExperiencesTable,
			Columns: resume.ExperiencesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.EducationsTable,
			Columns: resume.EducationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedEducationsIDs(); len(nodes) > 0 && !ruo.mutation.EducationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.EducationsTable,
			Columns: resume.EducationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EducationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.EducationsTable,
			Columns: resume.EducationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(education.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.SkillsTable,
			Columns: resume.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !ruo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.SkillsTable,
			Columns: resume.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.SkillsTable,
			Columns: resume.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.ProjectsTable,
			Columns: resume.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !ruo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.ProjectsTable,
			Columns: resume.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.ProjectsTable,
			Columns: resume.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CertificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.CertificationsTable,
			Columns: resume.CertificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedCertificationsIDs(); len(nodes) > 0 && !ruo.mutation.CertificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.CertificationsTable,
			Columns: resume.CertificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CertificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resume.CertificationsTable,
			Columns: resume.CertificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(certification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Resume{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resume.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
