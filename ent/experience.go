// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ntiGideon/cvCraft/ent/experience"
)

// Experience is the model entity for the Experience schema.
type Experience struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Company holds the value of the "company" field.
	Company string `json:"company,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Skills holds the value of the "skills" field.
	Skills string `json:"skills,omitempty"`
	// Current holds the value of the "current" field.
	Current bool `json:"current,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExperienceQuery when eager-loading is set.
	Edges        ExperienceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExperienceEdges holds the relations/edges for other nodes in the graph.
type ExperienceEdges struct {
	// Resume holds the value of the resume edge.
	Resume []*Resume `json:"resume,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ResumeOrErr returns the Resume value or an error if the edge
// was not loaded in eager-loading.
func (e ExperienceEdges) ResumeOrErr() ([]*Resume, error) {
	if e.loadedTypes[0] {
		return e.Resume, nil
	}
	return nil, &NotLoadedError{edge: "resume"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Experience) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case experience.FieldCurrent:
			values[i] = new(sql.NullBool)
		case experience.FieldID:
			values[i] = new(sql.NullInt64)
		case experience.FieldTitle, experience.FieldCompany, experience.FieldLocation, experience.FieldDescription, experience.FieldSkills:
			values[i] = new(sql.NullString)
		case experience.FieldStartDate, experience.FieldEndDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Experience fields.
func (e *Experience) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case experience.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case experience.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				e.Title = value.String
			}
		case experience.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				e.Company = value.String
			}
		case experience.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				e.Location = value.String
			}
		case experience.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				e.StartDate = value.Time
			}
		case experience.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				e.EndDate = value.Time
			}
		case experience.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case experience.FieldSkills:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field skills", values[i])
			} else if value.Valid {
				e.Skills = value.String
			}
		case experience.FieldCurrent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field current", values[i])
			} else if value.Valid {
				e.Current = value.Bool
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Experience.
// This includes values selected through modifiers, order, etc.
func (e *Experience) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryResume queries the "resume" edge of the Experience entity.
func (e *Experience) QueryResume() *ResumeQuery {
	return NewExperienceClient(e.config).QueryResume(e)
}

// Update returns a builder for updating this Experience.
// Note that you need to call Experience.Unwrap() before calling this method if this Experience
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Experience) Update() *ExperienceUpdateOne {
	return NewExperienceClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Experience entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Experience) Unwrap() *Experience {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Experience is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Experience) String() string {
	var builder strings.Builder
	builder.WriteString("Experience(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("title=")
	builder.WriteString(e.Title)
	builder.WriteString(", ")
	builder.WriteString("company=")
	builder.WriteString(e.Company)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(e.Location)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(e.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(e.EndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteString(", ")
	builder.WriteString("skills=")
	builder.WriteString(e.Skills)
	builder.WriteString(", ")
	builder.WriteString("current=")
	builder.WriteString(fmt.Sprintf("%v", e.Current))
	builder.WriteByte(')')
	return builder.String()
}

// Experiences is a parsable slice of Experience.
type Experiences []*Experience
