// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ntiGideon/cvCraft/ent/certification"
	"github.com/ntiGideon/cvCraft/ent/predicate"
	"github.com/ntiGideon/cvCraft/ent/resume"
)

// CertificationUpdate is the builder for updating Certification entities.
type CertificationUpdate struct {
	config
	hooks    []Hook
	mutation *CertificationMutation
}

// Where appends a list predicates to the CertificationUpdate builder.
func (cu *CertificationUpdate) Where(ps ...predicate.Certification) *CertificationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CertificationUpdate) SetName(s string) *CertificationUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CertificationUpdate) SetNillableName(s *string) *CertificationUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetOrganization sets the "organization" field.
func (cu *CertificationUpdate) SetOrganization(s string) *CertificationUpdate {
	cu.mutation.SetOrganization(s)
	return cu
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (cu *CertificationUpdate) SetNillableOrganization(s *string) *CertificationUpdate {
	if s != nil {
		cu.SetOrganization(*s)
	}
	return cu
}

// SetIssueDate sets the "issue_date" field.
func (cu *CertificationUpdate) SetIssueDate(t time.Time) *CertificationUpdate {
	cu.mutation.SetIssueDate(t)
	return cu
}

// SetNillableIssueDate sets the "issue_date" field if the given value is not nil.
func (cu *CertificationUpdate) SetNillableIssueDate(t *time.Time) *CertificationUpdate {
	if t != nil {
		cu.SetIssueDate(*t)
	}
	return cu
}

// SetExpirationDate sets the "expiration_date" field.
func (cu *CertificationUpdate) SetExpirationDate(t time.Time) *CertificationUpdate {
	cu.mutation.SetExpirationDate(t)
	return cu
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (cu *CertificationUpdate) SetNillableExpirationDate(t *time.Time) *CertificationUpdate {
	if t != nil {
		cu.SetExpirationDate(*t)
	}
	return cu
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (cu *CertificationUpdate) ClearExpirationDate() *CertificationUpdate {
	cu.mutation.ClearExpirationDate()
	return cu
}

// SetCredentialID sets the "credential_id" field.
func (cu *CertificationUpdate) SetCredentialID(s string) *CertificationUpdate {
	cu.mutation.SetCredentialID(s)
	return cu
}

// SetNillableCredentialID sets the "credential_id" field if the given value is not nil.
func (cu *CertificationUpdate) SetNillableCredentialID(s *string) *CertificationUpdate {
	if s != nil {
		cu.SetCredentialID(*s)
	}
	return cu
}

// ClearCredentialID clears the value of the "credential_id" field.
func (cu *CertificationUpdate) ClearCredentialID() *CertificationUpdate {
	cu.mutation.ClearCredentialID()
	return cu
}

// SetURL sets the "url" field.
func (cu *CertificationUpdate) SetURL(s string) *CertificationUpdate {
	cu.mutation.SetURL(s)
	return cu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cu *CertificationUpdate) SetNillableURL(s *string) *CertificationUpdate {
	if s != nil {
		cu.SetURL(*s)
	}
	return cu
}

// ClearURL clears the value of the "url" field.
func (cu *CertificationUpdate) ClearURL() *CertificationUpdate {
	cu.mutation.ClearURL()
	return cu
}

// AddResumeIDs adds the "resume" edge to the Resume entity by IDs.
func (cu *CertificationUpdate) AddResumeIDs(ids ...int) *CertificationUpdate {
	cu.mutation.AddResumeIDs(ids...)
	return cu
}

// AddResume adds the "resume" edges to the Resume entity.
func (cu *CertificationUpdate) AddResume(r ...*Resume) *CertificationUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddResumeIDs(ids...)
}

// Mutation returns the CertificationMutation object of the builder.
func (cu *CertificationUpdate) Mutation() *CertificationMutation {
	return cu.mutation
}

// ClearResume clears all "resume" edges to the Resume entity.
func (cu *CertificationUpdate) ClearResume() *CertificationUpdate {
	cu.mutation.ClearResume()
	return cu
}

// RemoveResumeIDs removes the "resume" edge to Resume entities by IDs.
func (cu *CertificationUpdate) RemoveResumeIDs(ids ...int) *CertificationUpdate {
	cu.mutation.RemoveResumeIDs(ids...)
	return cu
}

// RemoveResume removes "resume" edges to Resume entities.
func (cu *CertificationUpdate) RemoveResume(r ...*Resume) *CertificationUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveResumeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CertificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CertificationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CertificationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CertificationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CertificationUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := certification.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Certification.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Organization(); ok {
		if err := certification.OrganizationValidator(v); err != nil {
			return &ValidationError{Name: "organization", err: fmt.Errorf(`ent: validator failed for field "Certification.organization": %w`, err)}
		}
	}
	return nil
}

func (cu *CertificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(certification.Table, certification.Columns, sqlgraph.NewFieldSpec(certification.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(certification.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Organization(); ok {
		_spec.SetField(certification.FieldOrganization, field.TypeString, value)
	}
	if value, ok := cu.mutation.IssueDate(); ok {
		_spec.SetField(certification.FieldIssueDate, field.TypeTime, value)
	}
	if value, ok := cu.mutation.ExpirationDate(); ok {
		_spec.SetField(certification.FieldExpirationDate, field.TypeTime, value)
	}
	if cu.mutation.ExpirationDateCleared() {
		_spec.ClearField(certification.FieldExpirationDate, field.TypeTime)
	}
	if value, ok := cu.mutation.CredentialID(); ok {
		_spec.SetField(certification.FieldCredentialID, field.TypeString, value)
	}
	if cu.mutation.CredentialIDCleared() {
		_spec.ClearField(certification.FieldCredentialID, field.TypeString)
	}
	if value, ok := cu.mutation.URL(); ok {
		_spec.SetField(certification.FieldURL, field.TypeString, value)
	}
	if cu.mutation.URLCleared() {
		_spec.ClearField(certification.FieldURL, field.TypeString)
	}
	if cu.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   certification.ResumeTable,
			Columns: certification.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedResumeIDs(); len(nodes) > 0 && !cu.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   certification.ResumeTable,
			Columns: certification.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   certification.ResumeTable,
			Columns: certification.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CertificationUpdateOne is the builder for updating a single Certification entity.
type CertificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertificationMutation
}

// SetName sets the "name" field.
func (cuo *CertificationUpdateOne) SetName(s string) *CertificationUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CertificationUpdateOne) SetNillableName(s *string) *CertificationUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetOrganization sets the "organization" field.
func (cuo *CertificationUpdateOne) SetOrganization(s string) *CertificationUpdateOne {
	cuo.mutation.SetOrganization(s)
	return cuo
}

// SetNillableOrganization sets the "organization" field if the given value is not nil.
func (cuo *CertificationUpdateOne) SetNillableOrganization(s *string) *CertificationUpdateOne {
	if s != nil {
		cuo.SetOrganization(*s)
	}
	return cuo
}

// SetIssueDate sets the "issue_date" field.
func (cuo *CertificationUpdateOne) SetIssueDate(t time.Time) *CertificationUpdateOne {
	cuo.mutation.SetIssueDate(t)
	return cuo
}

// SetNillableIssueDate sets the "issue_date" field if the given value is not nil.
func (cuo *CertificationUpdateOne) SetNillableIssueDate(t *time.Time) *CertificationUpdateOne {
	if t != nil {
		cuo.SetIssueDate(*t)
	}
	return cuo
}

// SetExpirationDate sets the "expiration_date" field.
func (cuo *CertificationUpdateOne) SetExpirationDate(t time.Time) *CertificationUpdateOne {
	cuo.mutation.SetExpirationDate(t)
	return cuo
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (cuo *CertificationUpdateOne) SetNillableExpirationDate(t *time.Time) *CertificationUpdateOne {
	if t != nil {
		cuo.SetExpirationDate(*t)
	}
	return cuo
}

// ClearExpirationDate clears the value of the "expiration_date" field.
func (cuo *CertificationUpdateOne) ClearExpirationDate() *CertificationUpdateOne {
	cuo.mutation.ClearExpirationDate()
	return cuo
}

// SetCredentialID sets the "credential_id" field.
func (cuo *CertificationUpdateOne) SetCredentialID(s string) *CertificationUpdateOne {
	cuo.mutation.SetCredentialID(s)
	return cuo
}

// SetNillableCredentialID sets the "credential_id" field if the given value is not nil.
func (cuo *CertificationUpdateOne) SetNillableCredentialID(s *string) *CertificationUpdateOne {
	if s != nil {
		cuo.SetCredentialID(*s)
	}
	return cuo
}

// ClearCredentialID clears the value of the "credential_id" field.
func (cuo *CertificationUpdateOne) ClearCredentialID() *CertificationUpdateOne {
	cuo.mutation.ClearCredentialID()
	return cuo
}

// SetURL sets the "url" field.
func (cuo *CertificationUpdateOne) SetURL(s string) *CertificationUpdateOne {
	cuo.mutation.SetURL(s)
	return cuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cuo *CertificationUpdateOne) SetNillableURL(s *string) *CertificationUpdateOne {
	if s != nil {
		cuo.SetURL(*s)
	}
	return cuo
}

// ClearURL clears the value of the "url" field.
func (cuo *CertificationUpdateOne) ClearURL() *CertificationUpdateOne {
	cuo.mutation.ClearURL()
	return cuo
}

// AddResumeIDs adds the "resume" edge to the Resume entity by IDs.
func (cuo *CertificationUpdateOne) AddResumeIDs(ids ...int) *CertificationUpdateOne {
	cuo.mutation.AddResumeIDs(ids...)
	return cuo
}

// AddResume adds the "resume" edges to the Resume entity.
func (cuo *CertificationUpdateOne) AddResume(r ...*Resume) *CertificationUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddResumeIDs(ids...)
}

// Mutation returns the CertificationMutation object of the builder.
func (cuo *CertificationUpdateOne) Mutation() *CertificationMutation {
	return cuo.mutation
}

// ClearResume clears all "resume" edges to the Resume entity.
func (cuo *CertificationUpdateOne) ClearResume() *CertificationUpdateOne {
	cuo.mutation.ClearResume()
	return cuo
}

// RemoveResumeIDs removes the "resume" edge to Resume entities by IDs.
func (cuo *CertificationUpdateOne) RemoveResumeIDs(ids ...int) *CertificationUpdateOne {
	cuo.mutation.RemoveResumeIDs(ids...)
	return cuo
}

// RemoveResume removes "resume" edges to Resume entities.
func (cuo *CertificationUpdateOne) RemoveResume(r ...*Resume) *CertificationUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveResumeIDs(ids...)
}

// Where appends a list predicates to the CertificationUpdate builder.
func (cuo *CertificationUpdateOne) Where(ps ...predicate.Certification) *CertificationUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CertificationUpdateOne) Select(field string, fields ...string) *CertificationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Certification entity.
func (cuo *CertificationUpdateOne) Save(ctx context.Context) (*Certification, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CertificationUpdateOne) SaveX(ctx context.Context) *Certification {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CertificationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CertificationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CertificationUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := certification.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Certification.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Organization(); ok {
		if err := certification.OrganizationValidator(v); err != nil {
			return &ValidationError{Name: "organization", err: fmt.Errorf(`ent: validator failed for field "Certification.organization": %w`, err)}
		}
	}
	return nil
}

func (cuo *CertificationUpdateOne) sqlSave(ctx context.Context) (_node *Certification, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(certification.Table, certification.Columns, sqlgraph.NewFieldSpec(certification.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Certification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certification.FieldID)
		for _, f := range fields {
			if !certification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != certification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(certification.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Organization(); ok {
		_spec.SetField(certification.FieldOrganization, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IssueDate(); ok {
		_spec.SetField(certification.FieldIssueDate, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.ExpirationDate(); ok {
		_spec.SetField(certification.FieldExpirationDate, field.TypeTime, value)
	}
	if cuo.mutation.ExpirationDateCleared() {
		_spec.ClearField(certification.FieldExpirationDate, field.TypeTime)
	}
	if value, ok := cuo.mutation.CredentialID(); ok {
		_spec.SetField(certification.FieldCredentialID, field.TypeString, value)
	}
	if cuo.mutation.CredentialIDCleared() {
		_spec.ClearField(certification.FieldCredentialID, field.TypeString)
	}
	if value, ok := cuo.mutation.URL(); ok {
		_spec.SetField(certification.FieldURL, field.TypeString, value)
	}
	if cuo.mutation.URLCleared() {
		_spec.ClearField(certification.FieldURL, field.TypeString)
	}
	if cuo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   certification.ResumeTable,
			Columns: certification.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedResumeIDs(); len(nodes) > 0 && !cuo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   certification.ResumeTable,
			Columns: certification.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   certification.ResumeTable,
			Columns: certification.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Certification{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
