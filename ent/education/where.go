// Code generated by ent, DO NOT EDIT.

package education

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ntiGideon/cvCraft/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldID, id))
}

// Institution applies equality check predicate on the "institution" field. It's identical to InstitutionEQ.
func Institution(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldInstitution, v))
}

// Degree applies equality check predicate on the "degree" field. It's identical to DegreeEQ.
func Degree(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDegree, v))
}

// Field applies equality check predicate on the "field" field. It's identical to FieldEQ.
func Field(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldField, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldEndDate, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDescription, v))
}

// Grade applies equality check predicate on the "grade" field. It's identical to GradeEQ.
func Grade(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldGrade, v))
}

// InstitutionEQ applies the EQ predicate on the "institution" field.
func InstitutionEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldInstitution, v))
}

// InstitutionNEQ applies the NEQ predicate on the "institution" field.
func InstitutionNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldInstitution, v))
}

// InstitutionIn applies the In predicate on the "institution" field.
func InstitutionIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldInstitution, vs...))
}

// InstitutionNotIn applies the NotIn predicate on the "institution" field.
func InstitutionNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldInstitution, vs...))
}

// InstitutionGT applies the GT predicate on the "institution" field.
func InstitutionGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldInstitution, v))
}

// InstitutionGTE applies the GTE predicate on the "institution" field.
func InstitutionGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldInstitution, v))
}

// InstitutionLT applies the LT predicate on the "institution" field.
func InstitutionLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldInstitution, v))
}

// InstitutionLTE applies the LTE predicate on the "institution" field.
func InstitutionLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldInstitution, v))
}

// InstitutionContains applies the Contains predicate on the "institution" field.
func InstitutionContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldInstitution, v))
}

// InstitutionHasPrefix applies the HasPrefix predicate on the "institution" field.
func InstitutionHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldInstitution, v))
}

// InstitutionHasSuffix applies the HasSuffix predicate on the "institution" field.
func InstitutionHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldInstitution, v))
}

// InstitutionEqualFold applies the EqualFold predicate on the "institution" field.
func InstitutionEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldInstitution, v))
}

// InstitutionContainsFold applies the ContainsFold predicate on the "institution" field.
func InstitutionContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldInstitution, v))
}

// DegreeEQ applies the EQ predicate on the "degree" field.
func DegreeEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDegree, v))
}

// DegreeNEQ applies the NEQ predicate on the "degree" field.
func DegreeNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldDegree, v))
}

// DegreeIn applies the In predicate on the "degree" field.
func DegreeIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldDegree, vs...))
}

// DegreeNotIn applies the NotIn predicate on the "degree" field.
func DegreeNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldDegree, vs...))
}

// DegreeGT applies the GT predicate on the "degree" field.
func DegreeGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldDegree, v))
}

// DegreeGTE applies the GTE predicate on the "degree" field.
func DegreeGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldDegree, v))
}

// DegreeLT applies the LT predicate on the "degree" field.
func DegreeLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldDegree, v))
}

// DegreeLTE applies the LTE predicate on the "degree" field.
func DegreeLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldDegree, v))
}

// DegreeContains applies the Contains predicate on the "degree" field.
func DegreeContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldDegree, v))
}

// DegreeHasPrefix applies the HasPrefix predicate on the "degree" field.
func DegreeHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldDegree, v))
}

// DegreeHasSuffix applies the HasSuffix predicate on the "degree" field.
func DegreeHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldDegree, v))
}

// DegreeEqualFold applies the EqualFold predicate on the "degree" field.
func DegreeEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldDegree, v))
}

// DegreeContainsFold applies the ContainsFold predicate on the "degree" field.
func DegreeContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldDegree, v))
}

// FieldEQ applies the EQ predicate on the "field" field.
func FieldEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldField, v))
}

// FieldNEQ applies the NEQ predicate on the "field" field.
func FieldNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldField, v))
}

// FieldIn applies the In predicate on the "field" field.
func FieldIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldField, vs...))
}

// FieldNotIn applies the NotIn predicate on the "field" field.
func FieldNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldField, vs...))
}

// FieldGT applies the GT predicate on the "field" field.
func FieldGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldField, v))
}

// FieldGTE applies the GTE predicate on the "field" field.
func FieldGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldField, v))
}

// FieldLT applies the LT predicate on the "field" field.
func FieldLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldField, v))
}

// FieldLTE applies the LTE predicate on the "field" field.
func FieldLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldField, v))
}

// FieldContains applies the Contains predicate on the "field" field.
func FieldContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldField, v))
}

// FieldHasPrefix applies the HasPrefix predicate on the "field" field.
func FieldHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldField, v))
}

// FieldHasSuffix applies the HasSuffix predicate on the "field" field.
func FieldHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldField, v))
}

// FieldEqualFold applies the EqualFold predicate on the "field" field.
func FieldEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldField, v))
}

// FieldContainsFold applies the ContainsFold predicate on the "field" field.
func FieldContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldField, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldEndDate))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldDescription, v))
}

// GradeEQ applies the EQ predicate on the "grade" field.
func GradeEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldGrade, v))
}

// GradeNEQ applies the NEQ predicate on the "grade" field.
func GradeNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldGrade, v))
}

// GradeIn applies the In predicate on the "grade" field.
func GradeIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldGrade, vs...))
}

// GradeNotIn applies the NotIn predicate on the "grade" field.
func GradeNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldGrade, vs...))
}

// GradeGT applies the GT predicate on the "grade" field.
func GradeGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldGrade, v))
}

// GradeGTE applies the GTE predicate on the "grade" field.
func GradeGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldGrade, v))
}

// GradeLT applies the LT predicate on the "grade" field.
func GradeLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldGrade, v))
}

// GradeLTE applies the LTE predicate on the "grade" field.
func GradeLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldGrade, v))
}

// GradeContains applies the Contains predicate on the "grade" field.
func GradeContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldGrade, v))
}

// GradeHasPrefix applies the HasPrefix predicate on the "grade" field.
func GradeHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldGrade, v))
}

// GradeHasSuffix applies the HasSuffix predicate on the "grade" field.
func GradeHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldGrade, v))
}

// GradeIsNil applies the IsNil predicate on the "grade" field.
func GradeIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldGrade))
}

// GradeNotNil applies the NotNil predicate on the "grade" field.
func GradeNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldGrade))
}

// GradeEqualFold applies the EqualFold predicate on the "grade" field.
func GradeEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldGrade, v))
}

// GradeContainsFold applies the ContainsFold predicate on the "grade" field.
func GradeContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldGrade, v))
}

// HasResume applies the HasEdge predicate on the "resume" edge.
func HasResume() predicate.Education {
	return predicate.Education(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ResumeTable, ResumePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResumeWith applies the HasEdge predicate on the "resume" edge with a given conditions (other predicates).
func HasResumeWith(preds ...predicate.Resume) predicate.Education {
	return predicate.Education(func(s *sql.Selector) {
		step := newResumeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Education) predicate.Education {
	return predicate.Education(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Education) predicate.Education {
	return predicate.Education(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Education) predicate.Education {
	return predicate.Education(sql.NotPredicates(p))
}
