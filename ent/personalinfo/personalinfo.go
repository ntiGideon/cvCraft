// Code generated by ent, DO NOT EDIT.

package personalinfo

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the personalinfo type in the database.
	Label = "personal_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldProfession holds the string denoting the profession field in the database.
	FieldProfession = "profession"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// FieldLinkedin holds the string denoting the linkedin field in the database.
	FieldLinkedin = "linkedin"
	// FieldGithub holds the string denoting the github field in the database.
	FieldGithub = "github"
	// FieldTwitter holds the string denoting the twitter field in the database.
	FieldTwitter = "twitter"
	// FieldBio holds the string denoting the bio field in the database.
	FieldBio = "bio"
	// FieldPhotoURL holds the string denoting the photo_url field in the database.
	FieldPhotoURL = "photo_url"
	// EdgeResume holds the string denoting the resume edge name in mutations.
	EdgeResume = "resume"
	// Table holds the table name of the personalinfo in the database.
	Table = "personal_infos"
	// ResumeTable is the table that holds the resume relation/edge.
	ResumeTable = "personal_infos"
	// ResumeInverseTable is the table name for the Resume entity.
	// It exists in this package in order to avoid circular dependency with the "resume" package.
	ResumeInverseTable = "resumes"
	// ResumeColumn is the table column denoting the resume relation/edge.
	ResumeColumn = "resume_personal_info"
)

// Columns holds all SQL columns for personalinfo fields.
var Columns = []string{
	FieldID,
	FieldFirstName,
	FieldLastName,
	FieldProfession,
	FieldEmail,
	FieldPhone,
	FieldAddress,
	FieldWebsite,
	FieldLinkedin,
	FieldGithub,
	FieldTwitter,
	FieldBio,
	FieldPhotoURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "personal_infos"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"resume_personal_info",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// ProfessionValidator is a validator for the "profession" field. It is called by the builders before save.
	ProfessionValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
)

// OrderOption defines the ordering options for the PersonalInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByProfession orders the results by the profession field.
func ByProfession(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfession, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByWebsite orders the results by the website field.
func ByWebsite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebsite, opts...).ToFunc()
}

// ByLinkedin orders the results by the linkedin field.
func ByLinkedin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinkedin, opts...).ToFunc()
}

// ByGithub orders the results by the github field.
func ByGithub(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithub, opts...).ToFunc()
}

// ByTwitter orders the results by the twitter field.
func ByTwitter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTwitter, opts...).ToFunc()
}

// ByBio orders the results by the bio field.
func ByBio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBio, opts...).ToFunc()
}

// ByPhotoURL orders the results by the photo_url field.
func ByPhotoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoURL, opts...).ToFunc()
}

// ByResumeField orders the results by resume field.
func ByResumeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResumeStep(), sql.OrderByField(field, opts...))
	}
}
func newResumeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResumeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ResumeTable, ResumeColumn),
	)
}
