// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ntiGideon/cvCraft/ent/predicate"
	"github.com/ntiGideon/cvCraft/ent/resume"
	"github.com/ntiGideon/cvCraft/ent/skill"
)

// SkillUpdate is the builder for updating Skill entities.
type SkillUpdate struct {
	config
	hooks    []Hook
	mutation *SkillMutation
}

// Where appends a list predicates to the SkillUpdate builder.
func (su *SkillUpdate) Where(ps ...predicate.Skill) *SkillUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SkillUpdate) SetName(s string) *SkillUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SkillUpdate) SetNillableName(s *string) *SkillUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetCategory sets the "category" field.
func (su *SkillUpdate) SetCategory(s string) *SkillUpdate {
	su.mutation.SetCategory(s)
	return su
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (su *SkillUpdate) SetNillableCategory(s *string) *SkillUpdate {
	if s != nil {
		su.SetCategory(*s)
	}
	return su
}

// SetLevel sets the "level" field.
func (su *SkillUpdate) SetLevel(s skill.Level) *SkillUpdate {
	su.mutation.SetLevel(s)
	return su
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (su *SkillUpdate) SetNillableLevel(s *skill.Level) *SkillUpdate {
	if s != nil {
		su.SetLevel(*s)
	}
	return su
}

// AddResumeIDs adds the "resume" edge to the Resume entity by IDs.
func (su *SkillUpdate) AddResumeIDs(ids ...int) *SkillUpdate {
	su.mutation.AddResumeIDs(ids...)
	return su
}

// AddResume adds the "resume" edges to the Resume entity.
func (su *SkillUpdate) AddResume(r ...*Resume) *SkillUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddResumeIDs(ids...)
}

// Mutation returns the SkillMutation object of the builder.
func (su *SkillUpdate) Mutation() *SkillMutation {
	return su.mutation
}

// ClearResume clears all "resume" edges to the Resume entity.
func (su *SkillUpdate) ClearResume() *SkillUpdate {
	su.mutation.ClearResume()
	return su
}

// RemoveResumeIDs removes the "resume" edge to Resume entities by IDs.
func (su *SkillUpdate) RemoveResumeIDs(ids ...int) *SkillUpdate {
	su.mutation.RemoveResumeIDs(ids...)
	return su
}

// RemoveResume removes "resume" edges to Resume entities.
func (su *SkillUpdate) RemoveResume(r ...*Resume) *SkillUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveResumeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SkillUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SkillUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SkillUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SkillUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SkillUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := skill.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Skill.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Category(); ok {
		if err := skill.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Skill.category": %w`, err)}
		}
	}
	if v, ok := su.mutation.Level(); ok {
		if err := skill.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Skill.level": %w`, err)}
		}
	}
	return nil
}

func (su *SkillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(skill.Table, skill.Columns, sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(skill.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Category(); ok {
		_spec.SetField(skill.FieldCategory, field.TypeString, value)
	}
	if value, ok := su.mutation.Level(); ok {
		_spec.SetField(skill.FieldLevel, field.TypeEnum, value)
	}
	if su.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.ResumeTable,
			Columns: skill.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedResumeIDs(); len(nodes) > 0 && !su.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.ResumeTable,
			Columns: skill.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.ResumeTable,
			Columns: skill.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SkillUpdateOne is the builder for updating a single Skill entity.
type SkillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SkillMutation
}

// SetName sets the "name" field.
func (suo *SkillUpdateOne) SetName(s string) *SkillUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableName(s *string) *SkillUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetCategory sets the "category" field.
func (suo *SkillUpdateOne) SetCategory(s string) *SkillUpdateOne {
	suo.mutation.SetCategory(s)
	return suo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableCategory(s *string) *SkillUpdateOne {
	if s != nil {
		suo.SetCategory(*s)
	}
	return suo
}

// SetLevel sets the "level" field.
func (suo *SkillUpdateOne) SetLevel(s skill.Level) *SkillUpdateOne {
	suo.mutation.SetLevel(s)
	return suo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (suo *SkillUpdateOne) SetNillableLevel(s *skill.Level) *SkillUpdateOne {
	if s != nil {
		suo.SetLevel(*s)
	}
	return suo
}

// AddResumeIDs adds the "resume" edge to the Resume entity by IDs.
func (suo *SkillUpdateOne) AddResumeIDs(ids ...int) *SkillUpdateOne {
	suo.mutation.AddResumeIDs(ids...)
	return suo
}

// AddResume adds the "resume" edges to the Resume entity.
func (suo *SkillUpdateOne) AddResume(r ...*Resume) *SkillUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddResumeIDs(ids...)
}

// Mutation returns the SkillMutation object of the builder.
func (suo *SkillUpdateOne) Mutation() *SkillMutation {
	return suo.mutation
}

// ClearResume clears all "resume" edges to the Resume entity.
func (suo *SkillUpdateOne) ClearResume() *SkillUpdateOne {
	suo.mutation.ClearResume()
	return suo
}

// RemoveResumeIDs removes the "resume" edge to Resume entities by IDs.
func (suo *SkillUpdateOne) RemoveResumeIDs(ids ...int) *SkillUpdateOne {
	suo.mutation.RemoveResumeIDs(ids...)
	return suo
}

// RemoveResume removes "resume" edges to Resume entities.
func (suo *SkillUpdateOne) RemoveResume(r ...*Resume) *SkillUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveResumeIDs(ids...)
}

// Where appends a list predicates to the SkillUpdate builder.
func (suo *SkillUpdateOne) Where(ps ...predicate.Skill) *SkillUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SkillUpdateOne) Select(field string, fields ...string) *SkillUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Skill entity.
func (suo *SkillUpdateOne) Save(ctx context.Context) (*Skill, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SkillUpdateOne) SaveX(ctx context.Context) *Skill {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SkillUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SkillUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SkillUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := skill.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Skill.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Category(); ok {
		if err := skill.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Skill.category": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Level(); ok {
		if err := skill.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Skill.level": %w`, err)}
		}
	}
	return nil
}

func (suo *SkillUpdateOne) sqlSave(ctx context.Context) (_node *Skill, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(skill.Table, skill.Columns, sqlgraph.NewFieldSpec(skill.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Skill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, skill.FieldID)
		for _, f := range fields {
			if !skill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != skill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(skill.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Category(); ok {
		_spec.SetField(skill.FieldCategory, field.TypeString, value)
	}
	if value, ok := suo.mutation.Level(); ok {
		_spec.SetField(skill.FieldLevel, field.TypeEnum, value)
	}
	if suo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.ResumeTable,
			Columns: skill.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedResumeIDs(); len(nodes) > 0 && !suo.mutation.ResumeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.ResumeTable,
			Columns: skill.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   skill.ResumeTable,
			Columns: skill.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Skill{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
