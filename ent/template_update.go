// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/ntiGideon/cvCraft/ent/predicate"
	"github.com/ntiGideon/cvCraft/ent/resume"
	"github.com/ntiGideon/cvCraft/ent/template"
	"github.com/ntiGideon/cvCraft/ent/user"
	"github.com/ntiGideon/cvCraft/internal/models"
)

// TemplateUpdate is the builder for updating Template entities.
type TemplateUpdate struct {
	config
	hooks    []Hook
	mutation *TemplateMutation
}

// Where appends a list predicates to the TemplateUpdate builder.
func (tu *TemplateUpdate) Where(ps ...predicate.Template) *TemplateUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TemplateUpdate) SetName(s string) *TemplateUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableName(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TemplateUpdate) SetDescription(s string) *TemplateUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableDescription(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TemplateUpdate) ClearDescription() *TemplateUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetSections sets the "sections" field.
func (tu *TemplateUpdate) SetSections(s []string) *TemplateUpdate {
	tu.mutation.SetSections(s)
	return tu
}

// AppendSections appends s to the "sections" field.
func (tu *TemplateUpdate) AppendSections(s []string) *TemplateUpdate {
	tu.mutation.AppendSections(s)
	return tu
}

// SetConfig sets the "config" field.
func (tu *TemplateUpdate) SetConfig(mc *models.TemplateConfig) *TemplateUpdate {
	tu.mutation.SetConfig(mc)
	return tu
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (tu *TemplateUpdate) SetThumbnailURL(s string) *TemplateUpdate {
	tu.mutation.SetThumbnailURL(s)
	return tu
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableThumbnailURL(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetThumbnailURL(*s)
	}
	return tu
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (tu *TemplateUpdate) ClearThumbnailURL() *TemplateUpdate {
	tu.mutation.ClearThumbnailURL()
	return tu
}

// SetPreviewURL sets the "preview_url" field.
func (tu *TemplateUpdate) SetPreviewURL(s string) *TemplateUpdate {
	tu.mutation.SetPreviewURL(s)
	return tu
}

// SetNillablePreviewURL sets the "preview_url" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillablePreviewURL(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetPreviewURL(*s)
	}
	return tu
}

// ClearPreviewURL clears the value of the "preview_url" field.
func (tu *TemplateUpdate) ClearPreviewURL() *TemplateUpdate {
	tu.mutation.ClearPreviewURL()
	return tu
}

// SetStyle sets the "style" field.
func (tu *TemplateUpdate) SetStyle(s string) *TemplateUpdate {
	tu.mutation.SetStyle(s)
	return tu
}

// SetNillableStyle sets the "style" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableStyle(s *string) *TemplateUpdate {
	if s != nil {
		tu.SetStyle(*s)
	}
	return tu
}

// SetPremium sets the "premium" field.
func (tu *TemplateUpdate) SetPremium(b bool) *TemplateUpdate {
	tu.mutation.SetPremium(b)
	return tu
}

// SetNillablePremium sets the "premium" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillablePremium(b *bool) *TemplateUpdate {
	if b != nil {
		tu.SetPremium(*b)
	}
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TemplateUpdate) SetCreatedAt(t time.Time) *TemplateUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TemplateUpdate) SetNillableCreatedAt(t *time.Time) *TemplateUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tu *TemplateUpdate) SetOwnerID(id int) *TemplateUpdate {
	tu.mutation.SetOwnerID(id)
	return tu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (tu *TemplateUpdate) SetNillableOwnerID(id *int) *TemplateUpdate {
	if id != nil {
		tu = tu.SetOwnerID(*id)
	}
	return tu
}

// SetOwner sets the "owner" edge to the User entity.
func (tu *TemplateUpdate) SetOwner(u *User) *TemplateUpdate {
	return tu.SetOwnerID(u.ID)
}

// AddResumeIDs adds the "resumes" edge to the Resume entity by IDs.
func (tu *TemplateUpdate) AddResumeIDs(ids ...int) *TemplateUpdate {
	tu.mutation.AddResumeIDs(ids...)
	return tu
}

// AddResumes adds the "resumes" edges to the Resume entity.
func (tu *TemplateUpdate) AddResumes(r ...*Resume) *TemplateUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.AddResumeIDs(ids...)
}

// Mutation returns the TemplateMutation object of the builder.
func (tu *TemplateUpdate) Mutation() *TemplateMutation {
	return tu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tu *TemplateUpdate) ClearOwner() *TemplateUpdate {
	tu.mutation.ClearOwner()
	return tu
}

// ClearResumes clears all "resumes" edges to the Resume entity.
func (tu *TemplateUpdate) ClearResumes() *TemplateUpdate {
	tu.mutation.ClearResumes()
	return tu
}

// RemoveResumeIDs removes the "resumes" edge to Resume entities by IDs.
func (tu *TemplateUpdate) RemoveResumeIDs(ids ...int) *TemplateUpdate {
	tu.mutation.RemoveResumeIDs(ids...)
	return tu
}

// RemoveResumes removes "resumes" edges to Resume entities.
func (tu *TemplateUpdate) RemoveResumes(r ...*Resume) *TemplateUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.RemoveResumeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TemplateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TemplateUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TemplateUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TemplateUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := template.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Template.name": %w`, err)}
		}
	}
	return nil
}

func (tu *TemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(template.Table, template.Columns, sqlgraph.NewFieldSpec(template.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(template.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(template.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(template.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.Sections(); ok {
		_spec.SetField(template.FieldSections, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedSections(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, template.FieldSections, value)
		})
	}
	if value, ok := tu.mutation.Config(); ok {
		_spec.SetField(template.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.ThumbnailURL(); ok {
		_spec.SetField(template.FieldThumbnailURL, field.TypeString, value)
	}
	if tu.mutation.ThumbnailURLCleared() {
		_spec.ClearField(template.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := tu.mutation.PreviewURL(); ok {
		_spec.SetField(template.FieldPreviewURL, field.TypeString, value)
	}
	if tu.mutation.PreviewURLCleared() {
		_spec.ClearField(template.FieldPreviewURL, field.TypeString)
	}
	if value, ok := tu.mutation.Style(); ok {
		_spec.SetField(template.FieldStyle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Premium(); ok {
		_spec.SetField(template.FieldPremium, field.TypeBool, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(template.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   template.OwnerTable,
			Columns: []string{template.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   template.OwnerTable,
			Columns: []string{template.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ResumesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.ResumesTable,
			Columns: []string{template.ResumesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedResumesIDs(); len(nodes) > 0 && !tu.mutation.ResumesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.ResumesTable,
			Columns: []string{template.ResumesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ResumesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.ResumesTable,
			Columns: []string{template.ResumesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{template.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TemplateUpdateOne is the builder for updating a single Template entity.
type TemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TemplateMutation
}

// SetName sets the "name" field.
func (tuo *TemplateUpdateOne) SetName(s string) *TemplateUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableName(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TemplateUpdateOne) SetDescription(s string) *TemplateUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableDescription(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TemplateUpdateOne) ClearDescription() *TemplateUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetSections sets the "sections" field.
func (tuo *TemplateUpdateOne) SetSections(s []string) *TemplateUpdateOne {
	tuo.mutation.SetSections(s)
	return tuo
}

// AppendSections appends s to the "sections" field.
func (tuo *TemplateUpdateOne) AppendSections(s []string) *TemplateUpdateOne {
	tuo.mutation.AppendSections(s)
	return tuo
}

// SetConfig sets the "config" field.
func (tuo *TemplateUpdateOne) SetConfig(mc *models.TemplateConfig) *TemplateUpdateOne {
	tuo.mutation.SetConfig(mc)
	return tuo
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (tuo *TemplateUpdateOne) SetThumbnailURL(s string) *TemplateUpdateOne {
	tuo.mutation.SetThumbnailURL(s)
	return tuo
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableThumbnailURL(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetThumbnailURL(*s)
	}
	return tuo
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (tuo *TemplateUpdateOne) ClearThumbnailURL() *TemplateUpdateOne {
	tuo.mutation.ClearThumbnailURL()
	return tuo
}

// SetPreviewURL sets the "preview_url" field.
func (tuo *TemplateUpdateOne) SetPreviewURL(s string) *TemplateUpdateOne {
	tuo.mutation.SetPreviewURL(s)
	return tuo
}

// SetNillablePreviewURL sets the "preview_url" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillablePreviewURL(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetPreviewURL(*s)
	}
	return tuo
}

// ClearPreviewURL clears the value of the "preview_url" field.
func (tuo *TemplateUpdateOne) ClearPreviewURL() *TemplateUpdateOne {
	tuo.mutation.ClearPreviewURL()
	return tuo
}

// SetStyle sets the "style" field.
func (tuo *TemplateUpdateOne) SetStyle(s string) *TemplateUpdateOne {
	tuo.mutation.SetStyle(s)
	return tuo
}

// SetNillableStyle sets the "style" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableStyle(s *string) *TemplateUpdateOne {
	if s != nil {
		tuo.SetStyle(*s)
	}
	return tuo
}

// SetPremium sets the "premium" field.
func (tuo *TemplateUpdateOne) SetPremium(b bool) *TemplateUpdateOne {
	tuo.mutation.SetPremium(b)
	return tuo
}

// SetNillablePremium sets the "premium" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillablePremium(b *bool) *TemplateUpdateOne {
	if b != nil {
		tuo.SetPremium(*b)
	}
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TemplateUpdateOne) SetCreatedAt(t time.Time) *TemplateUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableCreatedAt(t *time.Time) *TemplateUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tuo *TemplateUpdateOne) SetOwnerID(id int) *TemplateUpdateOne {
	tuo.mutation.SetOwnerID(id)
	return tuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (tuo *TemplateUpdateOne) SetNillableOwnerID(id *int) *TemplateUpdateOne {
	if id != nil {
		tuo = tuo.SetOwnerID(*id)
	}
	return tuo
}

// SetOwner sets the "owner" edge to the User entity.
func (tuo *TemplateUpdateOne) SetOwner(u *User) *TemplateUpdateOne {
	return tuo.SetOwnerID(u.ID)
}

// AddResumeIDs adds the "resumes" edge to the Resume entity by IDs.
func (tuo *TemplateUpdateOne) AddResumeIDs(ids ...int) *TemplateUpdateOne {
	tuo.mutation.AddResumeIDs(ids...)
	return tuo
}

// AddResumes adds the "resumes" edges to the Resume entity.
func (tuo *TemplateUpdateOne) AddResumes(r ...*Resume) *TemplateUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.AddResumeIDs(ids...)
}

// Mutation returns the TemplateMutation object of the builder.
func (tuo *TemplateUpdateOne) Mutation() *TemplateMutation {
	return tuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tuo *TemplateUpdateOne) ClearOwner() *TemplateUpdateOne {
	tuo.mutation.ClearOwner()
	return tuo
}

// ClearResumes clears all "resumes" edges to the Resume entity.
func (tuo *TemplateUpdateOne) ClearResumes() *TemplateUpdateOne {
	tuo.mutation.ClearResumes()
	return tuo
}

// RemoveResumeIDs removes the "resumes" edge to Resume entities by IDs.
func (tuo *TemplateUpdateOne) RemoveResumeIDs(ids ...int) *TemplateUpdateOne {
	tuo.mutation.RemoveResumeIDs(ids...)
	return tuo
}

// RemoveResumes removes "resumes" edges to Resume entities.
func (tuo *TemplateUpdateOne) RemoveResumes(r ...*Resume) *TemplateUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.RemoveResumeIDs(ids...)
}

// Where appends a list predicates to the TemplateUpdate builder.
func (tuo *TemplateUpdateOne) Where(ps ...predicate.Template) *TemplateUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TemplateUpdateOne) Select(field string, fields ...string) *TemplateUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Template entity.
func (tuo *TemplateUpdateOne) Save(ctx context.Context) (*Template, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TemplateUpdateOne) SaveX(ctx context.Context) *Template {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TemplateUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TemplateUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := template.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Template.name": %w`, err)}
		}
	}
	return nil
}

func (tuo *TemplateUpdateOne) sqlSave(ctx context.Context) (_node *Template, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(template.Table, template.Columns, sqlgraph.NewFieldSpec(template.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Template.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, template.FieldID)
		for _, f := range fields {
			if !template.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != template.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(template.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(template.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(template.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.Sections(); ok {
		_spec.SetField(template.FieldSections, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedSections(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, template.FieldSections, value)
		})
	}
	if value, ok := tuo.mutation.Config(); ok {
		_spec.SetField(template.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.ThumbnailURL(); ok {
		_spec.SetField(template.FieldThumbnailURL, field.TypeString, value)
	}
	if tuo.mutation.ThumbnailURLCleared() {
		_spec.ClearField(template.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := tuo.mutation.PreviewURL(); ok {
		_spec.SetField(template.FieldPreviewURL, field.TypeString, value)
	}
	if tuo.mutation.PreviewURLCleared() {
		_spec.ClearField(template.FieldPreviewURL, field.TypeString)
	}
	if value, ok := tuo.mutation.Style(); ok {
		_spec.SetField(template.FieldStyle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Premium(); ok {
		_spec.SetField(template.FieldPremium, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(template.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   template.OwnerTable,
			Columns: []string{template.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   template.OwnerTable,
			Columns: []string{template.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ResumesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.ResumesTable,
			Columns: []string{template.ResumesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedResumesIDs(); len(nodes) > 0 && !tuo.mutation.ResumesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.ResumesTable,
			Columns: []string{template.ResumesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ResumesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   template.ResumesTable,
			Columns: []string{template.ResumesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Template{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{template.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
