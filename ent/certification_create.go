// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ntiGideon/cvCraft/ent/certification"
	"github.com/ntiGideon/cvCraft/ent/resume"
)

// CertificationCreate is the builder for creating a Certification entity.
type CertificationCreate struct {
	config
	mutation *CertificationMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *CertificationCreate) SetName(s string) *CertificationCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetOrganization sets the "organization" field.
func (cc *CertificationCreate) SetOrganization(s string) *CertificationCreate {
	cc.mutation.SetOrganization(s)
	return cc
}

// SetIssueDate sets the "issue_date" field.
func (cc *CertificationCreate) SetIssueDate(t time.Time) *CertificationCreate {
	cc.mutation.SetIssueDate(t)
	return cc
}

// SetExpirationDate sets the "expiration_date" field.
func (cc *CertificationCreate) SetExpirationDate(t time.Time) *CertificationCreate {
	cc.mutation.SetExpirationDate(t)
	return cc
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableExpirationDate(t *time.Time) *CertificationCreate {
	if t != nil {
		cc.SetExpirationDate(*t)
	}
	return cc
}

// SetCredentialID sets the "credential_id" field.
func (cc *CertificationCreate) SetCredentialID(s string) *CertificationCreate {
	cc.mutation.SetCredentialID(s)
	return cc
}

// SetNillableCredentialID sets the "credential_id" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableCredentialID(s *string) *CertificationCreate {
	if s != nil {
		cc.SetCredentialID(*s)
	}
	return cc
}

// SetURL sets the "url" field.
func (cc *CertificationCreate) SetURL(s string) *CertificationCreate {
	cc.mutation.SetURL(s)
	return cc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableURL(s *string) *CertificationCreate {
	if s != nil {
		cc.SetURL(*s)
	}
	return cc
}

// AddResumeIDs adds the "resume" edge to the Resume entity by IDs.
func (cc *CertificationCreate) AddResumeIDs(ids ...int) *CertificationCreate {
	cc.mutation.AddResumeIDs(ids...)
	return cc
}

// AddResume adds the "resume" edges to the Resume entity.
func (cc *CertificationCreate) AddResume(r ...*Resume) *CertificationCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cc.AddResumeIDs(ids...)
}

// Mutation returns the CertificationMutation object of the builder.
func (cc *CertificationCreate) Mutation() *CertificationMutation {
	return cc.mutation
}

// Save creates the Certification in the database.
func (cc *CertificationCreate) Save(ctx context.Context) (*Certification, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CertificationCreate) SaveX(ctx context.Context) *Certification {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CertificationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CertificationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CertificationCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Certification.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := certification.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Certification.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Organization(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required field "Certification.organization"`)}
	}
	if v, ok := cc.mutation.Organization(); ok {
		if err := certification.OrganizationValidator(v); err != nil {
			return &ValidationError{Name: "organization", err: fmt.Errorf(`ent: validator failed for field "Certification.organization": %w`, err)}
		}
	}
	if _, ok := cc.mutation.IssueDate(); !ok {
		return &ValidationError{Name: "issue_date", err: errors.New(`ent: missing required field "Certification.issue_date"`)}
	}
	if len(cc.mutation.ResumeIDs()) == 0 {
		return &ValidationError{Name: "resume", err: errors.New(`ent: missing required edge "Certification.resume"`)}
	}
	return nil
}

func (cc *CertificationCreate) sqlSave(ctx context.Context) (*Certification, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CertificationCreate) createSpec() (*Certification, *sqlgraph.CreateSpec) {
	var (
		_node = &Certification{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(certification.Table, sqlgraph.NewFieldSpec(certification.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(certification.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Organization(); ok {
		_spec.SetField(certification.FieldOrganization, field.TypeString, value)
		_node.Organization = value
	}
	if value, ok := cc.mutation.IssueDate(); ok {
		_spec.SetField(certification.FieldIssueDate, field.TypeTime, value)
		_node.IssueDate = value
	}
	if value, ok := cc.mutation.ExpirationDate(); ok {
		_spec.SetField(certification.FieldExpirationDate, field.TypeTime, value)
		_node.ExpirationDate = value
	}
	if value, ok := cc.mutation.CredentialID(); ok {
		_spec.SetField(certification.FieldCredentialID, field.TypeString, value)
		_node.CredentialID = value
	}
	if value, ok := cc.mutation.URL(); ok {
		_spec.SetField(certification.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if nodes := cc.mutation.ResumeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   certification.ResumeTable,
			Columns: certification.ResumePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CertificationCreateBulk is the builder for creating many Certification entities in bulk.
type CertificationCreateBulk struct {
	config
	err      error
	builders []*CertificationCreate
}

// Save creates the Certification entities in the database.
func (ccb *CertificationCreateBulk) Save(ctx context.Context) ([]*Certification, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Certification, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CertificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CertificationCreateBulk) SaveX(ctx context.Context) []*Certification {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CertificationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CertificationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
