// Code generated by ent, DO NOT EDIT.

package experience

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ntiGideon/cvCraft/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Experience {
	return predicate.Experience(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Experience {
	return predicate.Experience(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Experience {
	return predicate.Experience(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Experience {
	return predicate.Experience(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Experience {
	return predicate.Experience(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Experience {
	return predicate.Experience(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Experience {
	return predicate.Experience(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldTitle, v))
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldCompany, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldLocation, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldEndDate, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldDescription, v))
}

// Skills applies equality check predicate on the "skills" field. It's identical to SkillsEQ.
func Skills(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldSkills, v))
}

// Current applies equality check predicate on the "current" field. It's identical to CurrentEQ.
func Current(v bool) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldCurrent, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Experience {
	return predicate.Experience(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Experience {
	return predicate.Experience(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Experience {
	return predicate.Experience(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Experience {
	return predicate.Experience(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Experience {
	return predicate.Experience(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Experience {
	return predicate.Experience(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Experience {
	return predicate.Experience(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Experience {
	return predicate.Experience(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Experience {
	return predicate.Experience(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Experience {
	return predicate.Experience(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Experience {
	return predicate.Experience(sql.FieldContainsFold(FieldTitle, v))
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldCompany, v))
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.Experience {
	return predicate.Experience(sql.FieldNEQ(FieldCompany, v))
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.Experience {
	return predicate.Experience(sql.FieldIn(FieldCompany, vs...))
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.Experience {
	return predicate.Experience(sql.FieldNotIn(FieldCompany, vs...))
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.Experience {
	return predicate.Experience(sql.FieldGT(FieldCompany, v))
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.Experience {
	return predicate.Experience(sql.FieldGTE(FieldCompany, v))
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.Experience {
	return predicate.Experience(sql.FieldLT(FieldCompany, v))
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.Experience {
	return predicate.Experience(sql.FieldLTE(FieldCompany, v))
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.Experience {
	return predicate.Experience(sql.FieldContains(FieldCompany, v))
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.Experience {
	return predicate.Experience(sql.FieldHasPrefix(FieldCompany, v))
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.Experience {
	return predicate.Experience(sql.FieldHasSuffix(FieldCompany, v))
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEqualFold(FieldCompany, v))
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.Experience {
	return predicate.Experience(sql.FieldContainsFold(FieldCompany, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Experience {
	return predicate.Experience(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Experience {
	return predicate.Experience(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Experience {
	return predicate.Experience(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Experience {
	return predicate.Experience(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Experience {
	return predicate.Experience(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Experience {
	return predicate.Experience(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Experience {
	return predicate.Experience(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Experience {
	return predicate.Experience(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Experience {
	return predicate.Experience(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Experience {
	return predicate.Experience(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.Experience {
	return predicate.Experience(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.Experience {
	return predicate.Experience(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Experience {
	return predicate.Experience(sql.FieldContainsFold(FieldLocation, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Experience {
	return predicate.Experience(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Experience {
	return predicate.Experience(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Experience {
	return predicate.Experience(sql.FieldNotNull(FieldEndDate))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Experience {
	return predicate.Experience(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Experience {
	return predicate.Experience(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Experience {
	return predicate.Experience(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Experience {
	return predicate.Experience(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Experience {
	return predicate.Experience(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Experience {
	return predicate.Experience(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Experience {
	return predicate.Experience(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Experience {
	return predicate.Experience(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Experience {
	return predicate.Experience(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Experience {
	return predicate.Experience(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Experience {
	return predicate.Experience(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Experience {
	return predicate.Experience(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Experience {
	return predicate.Experience(sql.FieldContainsFold(FieldDescription, v))
}

// SkillsEQ applies the EQ predicate on the "skills" field.
func SkillsEQ(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldSkills, v))
}

// SkillsNEQ applies the NEQ predicate on the "skills" field.
func SkillsNEQ(v string) predicate.Experience {
	return predicate.Experience(sql.FieldNEQ(FieldSkills, v))
}

// SkillsIn applies the In predicate on the "skills" field.
func SkillsIn(vs ...string) predicate.Experience {
	return predicate.Experience(sql.FieldIn(FieldSkills, vs...))
}

// SkillsNotIn applies the NotIn predicate on the "skills" field.
func SkillsNotIn(vs ...string) predicate.Experience {
	return predicate.Experience(sql.FieldNotIn(FieldSkills, vs...))
}

// SkillsGT applies the GT predicate on the "skills" field.
func SkillsGT(v string) predicate.Experience {
	return predicate.Experience(sql.FieldGT(FieldSkills, v))
}

// SkillsGTE applies the GTE predicate on the "skills" field.
func SkillsGTE(v string) predicate.Experience {
	return predicate.Experience(sql.FieldGTE(FieldSkills, v))
}

// SkillsLT applies the LT predicate on the "skills" field.
func SkillsLT(v string) predicate.Experience {
	return predicate.Experience(sql.FieldLT(FieldSkills, v))
}

// SkillsLTE applies the LTE predicate on the "skills" field.
func SkillsLTE(v string) predicate.Experience {
	return predicate.Experience(sql.FieldLTE(FieldSkills, v))
}

// SkillsContains applies the Contains predicate on the "skills" field.
func SkillsContains(v string) predicate.Experience {
	return predicate.Experience(sql.FieldContains(FieldSkills, v))
}

// SkillsHasPrefix applies the HasPrefix predicate on the "skills" field.
func SkillsHasPrefix(v string) predicate.Experience {
	return predicate.Experience(sql.FieldHasPrefix(FieldSkills, v))
}

// SkillsHasSuffix applies the HasSuffix predicate on the "skills" field.
func SkillsHasSuffix(v string) predicate.Experience {
	return predicate.Experience(sql.FieldHasSuffix(FieldSkills, v))
}

// SkillsIsNil applies the IsNil predicate on the "skills" field.
func SkillsIsNil() predicate.Experience {
	return predicate.Experience(sql.FieldIsNull(FieldSkills))
}

// SkillsNotNil applies the NotNil predicate on the "skills" field.
func SkillsNotNil() predicate.Experience {
	return predicate.Experience(sql.FieldNotNull(FieldSkills))
}

// SkillsEqualFold applies the EqualFold predicate on the "skills" field.
func SkillsEqualFold(v string) predicate.Experience {
	return predicate.Experience(sql.FieldEqualFold(FieldSkills, v))
}

// SkillsContainsFold applies the ContainsFold predicate on the "skills" field.
func SkillsContainsFold(v string) predicate.Experience {
	return predicate.Experience(sql.FieldContainsFold(FieldSkills, v))
}

// CurrentEQ applies the EQ predicate on the "current" field.
func CurrentEQ(v bool) predicate.Experience {
	return predicate.Experience(sql.FieldEQ(FieldCurrent, v))
}

// CurrentNEQ applies the NEQ predicate on the "current" field.
func CurrentNEQ(v bool) predicate.Experience {
	return predicate.Experience(sql.FieldNEQ(FieldCurrent, v))
}

// HasResume applies the HasEdge predicate on the "resume" edge.
func HasResume() predicate.Experience {
	return predicate.Experience(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ResumeTable, ResumePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResumeWith applies the HasEdge predicate on the "resume" edge with a given conditions (other predicates).
func HasResumeWith(preds ...predicate.Resume) predicate.Experience {
	return predicate.Experience(func(s *sql.Selector) {
		step := newResumeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Experience) predicate.Experience {
	return predicate.Experience(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Experience) predicate.Experience {
	return predicate.Experience(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Experience) predicate.Experience {
	return predicate.Experience(sql.NotPredicates(p))
}
