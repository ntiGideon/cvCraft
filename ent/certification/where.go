// Code generated by ent, DO NOT EDIT.

package certification

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ntiGideon/cvCraft/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Certification {
	return predicate.Certification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Certification {
	return predicate.Certification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Certification {
	return predicate.Certification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Certification {
	return predicate.Certification(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldName, v))
}

// Organization applies equality check predicate on the "organization" field. It's identical to OrganizationEQ.
func Organization(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldOrganization, v))
}

// IssueDate applies equality check predicate on the "issue_date" field. It's identical to IssueDateEQ.
func IssueDate(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldIssueDate, v))
}

// ExpirationDate applies equality check predicate on the "expiration_date" field. It's identical to ExpirationDateEQ.
func ExpirationDate(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldExpirationDate, v))
}

// CredentialID applies equality check predicate on the "credential_id" field. It's identical to CredentialIDEQ.
func CredentialID(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldCredentialID, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldURL, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Certification {
	return predicate.Certification(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Certification {
	return predicate.Certification(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Certification {
	return predicate.Certification(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Certification {
	return predicate.Certification(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Certification {
	return predicate.Certification(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Certification {
	return predicate.Certification(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Certification {
	return predicate.Certification(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Certification {
	return predicate.Certification(sql.FieldContainsFold(FieldName, v))
}

// OrganizationEQ applies the EQ predicate on the "organization" field.
func OrganizationEQ(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldOrganization, v))
}

// OrganizationNEQ applies the NEQ predicate on the "organization" field.
func OrganizationNEQ(v string) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldOrganization, v))
}

// OrganizationIn applies the In predicate on the "organization" field.
func OrganizationIn(vs ...string) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldOrganization, vs...))
}

// OrganizationNotIn applies the NotIn predicate on the "organization" field.
func OrganizationNotIn(vs ...string) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldOrganization, vs...))
}

// OrganizationGT applies the GT predicate on the "organization" field.
func OrganizationGT(v string) predicate.Certification {
	return predicate.Certification(sql.FieldGT(FieldOrganization, v))
}

// OrganizationGTE applies the GTE predicate on the "organization" field.
func OrganizationGTE(v string) predicate.Certification {
	return predicate.Certification(sql.FieldGTE(FieldOrganization, v))
}

// OrganizationLT applies the LT predicate on the "organization" field.
func OrganizationLT(v string) predicate.Certification {
	return predicate.Certification(sql.FieldLT(FieldOrganization, v))
}

// OrganizationLTE applies the LTE predicate on the "organization" field.
func OrganizationLTE(v string) predicate.Certification {
	return predicate.Certification(sql.FieldLTE(FieldOrganization, v))
}

// OrganizationContains applies the Contains predicate on the "organization" field.
func OrganizationContains(v string) predicate.Certification {
	return predicate.Certification(sql.FieldContains(FieldOrganization, v))
}

// OrganizationHasPrefix applies the HasPrefix predicate on the "organization" field.
func OrganizationHasPrefix(v string) predicate.Certification {
	return predicate.Certification(sql.FieldHasPrefix(FieldOrganization, v))
}

// OrganizationHasSuffix applies the HasSuffix predicate on the "organization" field.
func OrganizationHasSuffix(v string) predicate.Certification {
	return predicate.Certification(sql.FieldHasSuffix(FieldOrganization, v))
}

// OrganizationEqualFold applies the EqualFold predicate on the "organization" field.
func OrganizationEqualFold(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEqualFold(FieldOrganization, v))
}

// OrganizationContainsFold applies the ContainsFold predicate on the "organization" field.
func OrganizationContainsFold(v string) predicate.Certification {
	return predicate.Certification(sql.FieldContainsFold(FieldOrganization, v))
}

// IssueDateEQ applies the EQ predicate on the "issue_date" field.
func IssueDateEQ(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldIssueDate, v))
}

// IssueDateNEQ applies the NEQ predicate on the "issue_date" field.
func IssueDateNEQ(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldIssueDate, v))
}

// IssueDateIn applies the In predicate on the "issue_date" field.
func IssueDateIn(vs ...time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldIssueDate, vs...))
}

// IssueDateNotIn applies the NotIn predicate on the "issue_date" field.
func IssueDateNotIn(vs ...time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldIssueDate, vs...))
}

// IssueDateGT applies the GT predicate on the "issue_date" field.
func IssueDateGT(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldGT(FieldIssueDate, v))
}

// IssueDateGTE applies the GTE predicate on the "issue_date" field.
func IssueDateGTE(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldGTE(FieldIssueDate, v))
}

// IssueDateLT applies the LT predicate on the "issue_date" field.
func IssueDateLT(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldLT(FieldIssueDate, v))
}

// IssueDateLTE applies the LTE predicate on the "issue_date" field.
func IssueDateLTE(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldLTE(FieldIssueDate, v))
}

// ExpirationDateEQ applies the EQ predicate on the "expiration_date" field.
func ExpirationDateEQ(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldExpirationDate, v))
}

// ExpirationDateNEQ applies the NEQ predicate on the "expiration_date" field.
func ExpirationDateNEQ(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldExpirationDate, v))
}

// ExpirationDateIn applies the In predicate on the "expiration_date" field.
func ExpirationDateIn(vs ...time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldExpirationDate, vs...))
}

// ExpirationDateNotIn applies the NotIn predicate on the "expiration_date" field.
func ExpirationDateNotIn(vs ...time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldExpirationDate, vs...))
}

// ExpirationDateGT applies the GT predicate on the "expiration_date" field.
func ExpirationDateGT(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldGT(FieldExpirationDate, v))
}

// ExpirationDateGTE applies the GTE predicate on the "expiration_date" field.
func ExpirationDateGTE(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldGTE(FieldExpirationDate, v))
}

// ExpirationDateLT applies the LT predicate on the "expiration_date" field.
func ExpirationDateLT(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldLT(FieldExpirationDate, v))
}

// ExpirationDateLTE applies the LTE predicate on the "expiration_date" field.
func ExpirationDateLTE(v time.Time) predicate.Certification {
	return predicate.Certification(sql.FieldLTE(FieldExpirationDate, v))
}

// ExpirationDateIsNil applies the IsNil predicate on the "expiration_date" field.
func ExpirationDateIsNil() predicate.Certification {
	return predicate.Certification(sql.FieldIsNull(FieldExpirationDate))
}

// ExpirationDateNotNil applies the NotNil predicate on the "expiration_date" field.
func ExpirationDateNotNil() predicate.Certification {
	return predicate.Certification(sql.FieldNotNull(FieldExpirationDate))
}

// CredentialIDEQ applies the EQ predicate on the "credential_id" field.
func CredentialIDEQ(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldCredentialID, v))
}

// CredentialIDNEQ applies the NEQ predicate on the "credential_id" field.
func CredentialIDNEQ(v string) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldCredentialID, v))
}

// CredentialIDIn applies the In predicate on the "credential_id" field.
func CredentialIDIn(vs ...string) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldCredentialID, vs...))
}

// CredentialIDNotIn applies the NotIn predicate on the "credential_id" field.
func CredentialIDNotIn(vs ...string) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldCredentialID, vs...))
}

// CredentialIDGT applies the GT predicate on the "credential_id" field.
func CredentialIDGT(v string) predicate.Certification {
	return predicate.Certification(sql.FieldGT(FieldCredentialID, v))
}

// CredentialIDGTE applies the GTE predicate on the "credential_id" field.
func CredentialIDGTE(v string) predicate.Certification {
	return predicate.Certification(sql.FieldGTE(FieldCredentialID, v))
}

// CredentialIDLT applies the LT predicate on the "credential_id" field.
func CredentialIDLT(v string) predicate.Certification {
	return predicate.Certification(sql.FieldLT(FieldCredentialID, v))
}

// CredentialIDLTE applies the LTE predicate on the "credential_id" field.
func CredentialIDLTE(v string) predicate.Certification {
	return predicate.Certification(sql.FieldLTE(FieldCredentialID, v))
}

// CredentialIDContains applies the Contains predicate on the "credential_id" field.
func CredentialIDContains(v string) predicate.Certification {
	return predicate.Certification(sql.FieldContains(FieldCredentialID, v))
}

// CredentialIDHasPrefix applies the HasPrefix predicate on the "credential_id" field.
func CredentialIDHasPrefix(v string) predicate.Certification {
	return predicate.Certification(sql.FieldHasPrefix(FieldCredentialID, v))
}

// CredentialIDHasSuffix applies the HasSuffix predicate on the "credential_id" field.
func CredentialIDHasSuffix(v string) predicate.Certification {
	return predicate.Certification(sql.FieldHasSuffix(FieldCredentialID, v))
}

// CredentialIDIsNil applies the IsNil predicate on the "credential_id" field.
func CredentialIDIsNil() predicate.Certification {
	return predicate.Certification(sql.FieldIsNull(FieldCredentialID))
}

// CredentialIDNotNil applies the NotNil predicate on the "credential_id" field.
func CredentialIDNotNil() predicate.Certification {
	return predicate.Certification(sql.FieldNotNull(FieldCredentialID))
}

// CredentialIDEqualFold applies the EqualFold predicate on the "credential_id" field.
func CredentialIDEqualFold(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEqualFold(FieldCredentialID, v))
}

// CredentialIDContainsFold applies the ContainsFold predicate on the "credential_id" field.
func CredentialIDContainsFold(v string) predicate.Certification {
	return predicate.Certification(sql.FieldContainsFold(FieldCredentialID, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Certification {
	return predicate.Certification(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Certification {
	return predicate.Certification(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Certification {
	return predicate.Certification(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Certification {
	return predicate.Certification(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Certification {
	return predicate.Certification(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Certification {
	return predicate.Certification(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Certification {
	return predicate.Certification(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Certification {
	return predicate.Certification(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Certification {
	return predicate.Certification(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Certification {
	return predicate.Certification(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.Certification {
	return predicate.Certification(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.Certification {
	return predicate.Certification(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Certification {
	return predicate.Certification(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Certification {
	return predicate.Certification(sql.FieldContainsFold(FieldURL, v))
}

// HasResume applies the HasEdge predicate on the "resume" edge.
func HasResume() predicate.Certification {
	return predicate.Certification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ResumeTable, ResumePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResumeWith applies the HasEdge predicate on the "resume" edge with a given conditions (other predicates).
func HasResumeWith(preds ...predicate.Resume) predicate.Certification {
	return predicate.Certification(func(s *sql.Selector) {
		step := newResumeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Certification) predicate.Certification {
	return predicate.Certification(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Certification) predicate.Certification {
	return predicate.Certification(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Certification) predicate.Certification {
	return predicate.Certification(sql.NotPredicates(p))
}
